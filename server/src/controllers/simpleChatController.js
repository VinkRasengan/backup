const { v4: uuidv4 } = require('uuid');

class SimpleChatController {
  constructor() {
    // Try to load OpenAI service
    try {
      this.openaiService = require('../services/openaiService');
      console.log('‚úÖ OpenAI service loaded in SimpleChatController');
    } catch (error) {
      console.warn('‚ö†Ô∏è OpenAI service not available:', error.message);
      this.openaiService = null;
    }

    // Try to load database
    try {
      this.database = require('../config/database');
      console.log('‚úÖ Database loaded in SimpleChatController');
    } catch (error) {
      console.warn('‚ö†Ô∏è Database not available:', error.message);
      this.database = null;
    }
  }

  // Get conversation starters
  getConversationStarters(req, res) {
    res.json({
      starters: [
        "L√†m th·∫ø n√†o ƒë·ªÉ nh·∫≠n bi·∫øt email l·ª´a ƒë·∫£o?",
        "C√°ch ki·ªÉm tra m·ªôt trang web c√≥ an to√†n kh√¥ng?",
        "Nh·ªØng d·∫•u hi·ªáu c·ªßa tin gi·∫£ tr√™n m·∫°ng x√£ h·ªôi?",
        "C√°ch b·∫£o v·ªá th√¥ng tin c√° nh√¢n khi duy·ªát web?",
        "Ph√¢n t√≠ch link n√†y c√≥ an to√†n kh√¥ng?"
      ]
    });
  }

  // Get security tips
  getSecurityTips(req, res) {
    const category = req.query.category || 'general';
    
    const tips = {
      general: [
        "Lu√¥n c·∫≠p nh·∫≠t ph·∫ßn m·ªÅm v√† h·ªá ƒëi·ªÅu h√†nh",
        "S·ª≠ d·ª•ng m·∫≠t kh·∫©u m·∫°nh v√† duy nh·∫•t cho m·ªói t√†i kho·∫£n",
        "K√≠ch ho·∫°t x√°c th·ª±c hai y·∫øu t·ªë khi c√≥ th·ªÉ",
        "C·∫©n th·∫≠n v·ªõi email v√† tin nh·∫Øn ƒë√°ng ng·ªù"
      ],
      phishing: [
        "Ki·ªÉm tra ƒë·ªãa ch·ªâ email ng∆∞·ªùi g·ª≠i",
        "Kh√¥ng click v√†o link ƒë√°ng ng·ªù",
        "X√°c minh th√¥ng tin qua k√™nh ch√≠nh th·ª©c",
        "Ch√∫ √Ω ƒë·∫øn l·ªói ch√≠nh t·∫£ v√† ng·ªØ ph√°p"
      ],
      malware: [
        "Ch·ªâ t·∫£i ph·∫ßn m·ªÅm t·ª´ ngu·ªìn tin c·∫≠y",
        "S·ª≠ d·ª•ng ph·∫ßn m·ªÅm di·ªát virus",
        "Kh√¥ng m·ªü file ƒë√≠nh k√®m ƒë√°ng ng·ªù",
        "Th∆∞·ªùng xuy√™n sao l∆∞u d·ªØ li·ªáu"
      ]
    };

    res.json({
      category,
      tips: tips[category] || tips.general
    });
  }

  // Send message to OpenAI (public endpoint)
  async sendOpenAIMessage(req, res) {
    try {
      const { message } = req.body;

      if (!message || message.trim().length === 0) {
        return res.status(400).json({
          error: 'Message is required',
          code: 'INVALID_MESSAGE'
        });
      }

      // Try OpenAI service if available
      if (this.openaiService && this.openaiService.isConfigured()) {
        console.log('ü§ñ Using OpenAI service for public message');
        const response = await this.openaiService.sendMessage(message, []);

        if (response.success) {
          return res.json({
            data: {
              message: 'Ph·∫£n h·ªìi t·ª´ FactCheck AI',
              response: {
                content: response.message,
                createdAt: new Date().toISOString(),
                source: 'openai'
              }
            }
          });
        } else {
          console.warn('OpenAI service failed:', response.error);
        }
      }

      // Fallback to mock response
      const mockResponse = this.generateMockResponse(message);
      res.json({
        data: {
          message: 'Ph·∫£n h·ªìi t·ª´ FactCheck AI (Demo Mode)',
          response: {
            content: mockResponse,
            createdAt: new Date().toISOString(),
            source: 'mock'
          }
        }
      });

    } catch (error) {
      console.error('SendOpenAIMessage error:', error);
      res.status(500).json({
        error: 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω tin nh·∫Øn',
        code: 'INTERNAL_ERROR'
      });
    }
  }

  // Send message (authenticated endpoint)
  async sendMessage(req, res) {
    try {
      const { message, conversationId } = req.body;
      const userId = req.user?.userId || 'anonymous';

      if (!message || message.trim().length === 0) {
        return res.status(400).json({
          error: 'Message is required',
          code: 'INVALID_MESSAGE'
        });
      }

      // Create or get conversation
      let conversation = null;
      if (conversationId) {
        conversation = { id: conversationId, title: 'Cu·ªôc tr√≤ chuy·ªán' };
      } else {
        conversation = {
          id: uuidv4(),
          title: message.substring(0, 50) + (message.length > 50 ? '...' : ''),
          userId,
          createdAt: new Date().toISOString()
        };
      }

      // Try OpenAI service
      let aiResponse = null;
      if (this.openaiService && this.openaiService.isConfigured()) {
        console.log('ü§ñ Using OpenAI service for authenticated message');
        aiResponse = await this.openaiService.sendMessage(message, []);
      }

      if (!aiResponse || !aiResponse.success) {
        // Fallback to mock response
        const mockContent = this.generateMockResponse(message);
        aiResponse = {
          success: true,
          message: mockContent
        };
      }

      // Store conversation and messages if database is available
      if (this.database && this.database.isConnected) {
        try {
          // Store conversation
          await this.database.pool.query(
            'INSERT INTO conversations (id, user_id, title, created_at, updated_at) VALUES ($1, $2, $3, $4, $4) ON CONFLICT (id) DO NOTHING',
            [conversation.id, userId, conversation.title, new Date()]
          );

          // Store user message
          await this.database.pool.query(
            'INSERT INTO chat_messages (id, conversation_id, user_id, role, content, created_at) VALUES ($1, $2, $3, $4, $5, $6)',
            [uuidv4(), conversation.id, userId, 'user', message, new Date()]
          );

          // Store AI response
          await this.database.pool.query(
            'INSERT INTO chat_messages (id, conversation_id, user_id, role, content, created_at) VALUES ($1, $2, $3, $4, $5, $6)',
            [uuidv4(), conversation.id, userId, 'assistant', aiResponse.message, new Date()]
          );

        } catch (dbError) {
          console.warn('Database storage failed:', dbError.message);
        }
      }

      res.json({
        message: 'Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng',
        conversation: {
          id: conversation.id,
          title: conversation.title
        },
        response: {
          content: aiResponse.message,
          createdAt: new Date().toISOString()
        }
      });

    } catch (error) {
      console.error('SendMessage error:', error);
      res.status(500).json({
        error: 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω tin nh·∫Øn',
        code: 'INTERNAL_ERROR'
      });
    }
  }

  // Get conversation history
  async getConversation(req, res) {
    try {
      const { conversationId } = req.params;
      const userId = req.user?.userId || 'anonymous';

      if (this.database && this.database.isConnected) {
        const messagesResult = await this.database.pool.query(
          'SELECT * FROM chat_messages WHERE conversation_id = $1 ORDER BY created_at ASC',
          [conversationId]
        );

        const messages = messagesResult.rows.map(row => ({
          id: row.id,
          role: row.role,
          content: row.content,
          createdAt: row.created_at
        }));

        res.json({ messages });
      } else {
        // Fallback - return empty conversation
        res.json({ messages: [] });
      }

    } catch (error) {
      console.error('GetConversation error:', error);
      res.status(500).json({
        error: 'Kh√¥ng th·ªÉ t·∫£i cu·ªôc tr√≤ chuy·ªán',
        code: 'INTERNAL_ERROR'
      });
    }
  }

  // Get user's conversations
  async getConversations(req, res) {
    try {
      const userId = req.user?.userId || 'anonymous';
      const { page = 1, limit = 20 } = req.query;

      if (this.database && this.database.isConnected) {
        const offset = (page - 1) * limit;
        const conversationsResult = await this.database.pool.query(
          'SELECT * FROM conversations WHERE user_id = $1 ORDER BY updated_at DESC LIMIT $2 OFFSET $3',
          [userId, limit, offset]
        );

        const conversations = conversationsResult.rows.map(row => ({
          id: row.id,
          title: row.title,
          messageCount: row.message_count || 0,
          createdAt: row.created_at,
          updatedAt: row.updated_at
        }));

        res.json({ conversations });
      } else {
        // Fallback - return empty list
        res.json({ conversations: [] });
      }

    } catch (error) {
      console.error('GetConversations error:', error);
      res.status(500).json({
        error: 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch cu·ªôc tr√≤ chuy·ªán',
        code: 'INTERNAL_ERROR'
      });
    }
  }

  // Delete conversation
  async deleteConversation(req, res) {
    try {
      const { conversationId } = req.params;
      const userId = req.user?.userId || 'anonymous';

      if (this.database && this.database.isConnected) {
        await this.database.pool.query(
          'DELETE FROM conversations WHERE id = $1 AND user_id = $2',
          [conversationId, userId]
        );
      }

      res.json({ message: 'Cu·ªôc tr√≤ chuy·ªán ƒë√£ ƒë∆∞·ª£c x√≥a' });

    } catch (error) {
      console.error('DeleteConversation error:', error);
      res.status(500).json({
        error: 'Kh√¥ng th·ªÉ x√≥a cu·ªôc tr√≤ chuy·ªán',
        code: 'INTERNAL_ERROR'
      });
    }
  }

  // Generate mock response for fallback
  generateMockResponse(message) {
    const lowerMessage = message.toLowerCase();
    
    if (lowerMessage.includes('email') || lowerMessage.includes('phishing')) {
      return 'ƒê·ªÉ nh·∫≠n bi·∫øt email l·ª´a ƒë·∫£o, h√£y ki·ªÉm tra: 1) ƒê·ªãa ch·ªâ email ng∆∞·ªùi g·ª≠i c√≥ ƒë√°ng tin kh√¥ng, 2) C√≥ l·ªói ch√≠nh t·∫£ hay ng·ªØ ph√°p kh√¥ng, 3) C√≥ y√™u c·∫ßu th√¥ng tin nh·∫°y c·∫£m kh√¥ng, 4) Link trong email c√≥ d·∫´n ƒë·∫øn trang web ch√≠nh th·ª©c kh√¥ng.';
    }
    
    if (lowerMessage.includes('link') || lowerMessage.includes('website')) {
      return 'ƒê·ªÉ ki·ªÉm tra t√≠nh an to√†n c·ªßa m·ªôt website: 1) Ki·ªÉm tra URL c√≥ ch√≠nh x√°c kh√¥ng, 2) T√¨m ch·ª©ng ch·ªâ SSL (https://), 3) ƒê·ªçc ƒë√°nh gi√° t·ª´ ng∆∞·ªùi d√πng kh√°c, 4) S·ª≠ d·ª•ng c√¥ng c·ª• ki·ªÉm tra nh∆∞ VirusTotal, 5) C·∫©n th·∫≠n v·ªõi c√°c trang y√™u c·∫ßu th√¥ng tin c√° nh√¢n.';
    }
    
    if (lowerMessage.includes('tin gi·∫£') || lowerMessage.includes('fake news')) {
      return 'D·∫•u hi·ªáu nh·∫≠n bi·∫øt tin gi·∫£: 1) Ti√™u ƒë·ªÅ qu√° gi·∫≠t g√¢n, 2) Kh√¥ng c√≥ ngu·ªìn tin r√µ r√†ng, 3) Ng√¥n ng·ªØ c·∫£m x√∫c qu√° m·ª©c, 4) Th√¥ng tin m√¢u thu·∫´n v·ªõi c√°c ngu·ªìn uy t√≠n, 5) ƒê∆∞·ª£c chia s·∫ª t·ª´ t√†i kho·∫£n ·∫©n danh ho·∫∑c kh√¥ng ƒë√°ng tin.';
    }
    
    return 'C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng FactCheck AI! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ: ki·ªÉm tra link, nh·∫≠n bi·∫øt email l·ª´a ƒë·∫£o, ph√¢n t√≠ch tin gi·∫£, v√† c√°c v·∫•n ƒë·ªÅ b·∫£o m·∫≠t kh√°c. H√£y h·ªèi t√¥i m·ªôt c√¢u h·ªèi c·ª• th·ªÉ!';
  }
}

module.exports = new SimpleChatController();
