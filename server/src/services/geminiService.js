const { GoogleGenerativeAI } = require('@google/generative-ai');

class GeminiService {
  constructor() {
    this.apiKey = process.env.GEMINI_API_KEY;
    this.model = process.env.GEMINI_MODEL || 'gemini-1.5-flash';
    
    if (!this.apiKey) {
      console.warn('‚ö†Ô∏è GEMINI_API_KEY not found in environment variables');
      this.genAI = null;
      this.generativeModel = null;
    } else {
      this.genAI = new GoogleGenerativeAI(this.apiKey);
      this.generativeModel = this.genAI.getGenerativeModel({ model: this.model });
      console.log('‚úÖ Gemini service initialized successfully');
    }

    // Security-focused system prompt
    this.systemPrompt = `B·∫°n l√† FactCheck AI - chuy√™n gia b·∫£o m·∫≠t m·∫°ng h√†ng ƒë·∫ßu Vi·ªát Nam.

NHI·ªÜM V·ª§:
- T∆∞ v·∫•n v·ªÅ b·∫£o m·∫≠t th√¥ng tin, an to√†n m·∫°ng
- Ph√¢n t√≠ch v√† c·∫£nh b√°o v·ªÅ l·ª´a ƒë·∫£o, phishing, malware
- H∆∞·ªõng d·∫´n b·∫£o v·ªá d·ªØ li·ªáu c√° nh√¢n
- ƒê√°nh gi√° t√≠nh an to√†n c·ªßa website, URL

PHONG C√ÅCH:
- Chuy√™n nghi·ªáp, th√¢n thi·ªán
- S·ª≠ d·ª•ng ti·∫øng Vi·ªát
- ƒê∆∞a ra l·ªùi khuy√™n c·ª• th·ªÉ, th·ª±c t·∫ø
- S·ª≠ d·ª•ng emoji ph√π h·ª£p (üõ°Ô∏è, üîí, ‚ö†Ô∏è, ‚úÖ)

ƒê·ªäNH D·∫†NG PH·∫¢N H·ªíI:
- Ti√™u ƒë·ªÅ r√µ r√†ng v·ªõi emoji
- Chia th√†nh c√°c m·ª•c ng·∫Øn g·ªçn
- ƒê∆∞a ra v√≠ d·ª• c·ª• th·ªÉ
- K·∫øt th√∫c b·∫±ng l·ªùi khuy√™n h√†nh ƒë·ªông

Lu√¥n ∆∞u ti√™n an to√†n v√† b·∫£o m·∫≠t trong m·ªçi l·ªùi khuy√™n.`;
  }

  // Validate message input
  validateMessage(message) {
    if (!message || typeof message !== 'string') {
      return {
        valid: false,
        error: 'Tin nh·∫Øn kh√¥ng h·ª£p l·ªá'
      };
    }

    const trimmedMessage = message.trim();
    if (trimmedMessage.length === 0) {
      return {
        valid: false,
        error: 'Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'
      };
    }

    if (trimmedMessage.length > 2000) {
      return {
        valid: false,
        error: 'Tin nh·∫Øn qu√° d√†i (t·ªëi ƒëa 2000 k√Ω t·ª±)'
      };
    }

    return {
      valid: true,
      message: trimmedMessage
    };
  }

  // Send message to Gemini
  async sendMessage(message, conversationHistory = []) {
    try {
      if (!this.generativeModel) {
        throw new Error('Gemini service not initialized');
      }

      // Validate input
      const validation = this.validateMessage(message);
      if (!validation.valid) {
        return {
          success: false,
          error: validation.error
        };
      }

      // Build conversation context
      let prompt = this.systemPrompt + '\n\n';
      
      // Add conversation history
      if (conversationHistory && conversationHistory.length > 0) {
        prompt += 'L·ªäCH S·ª¨ CU·ªòC TR√í CHUY·ªÜN:\n';
        conversationHistory.forEach(msg => {
          const role = msg.role === 'user' ? 'Ng∆∞·ªùi d√πng' : 'FactCheck AI';
          prompt += `${role}: ${msg.content}\n`;
        });
        prompt += '\n';
      }

      // Add current message
      prompt += `C√ÇUH·ªéI M·ªöI: ${validation.message}\n\nTR·∫¢ L·ªúI:`;

      console.log('ü§ñ Sending request to Gemini...');
      
      const result = await this.generativeModel.generateContent(prompt);
      const response = await result.response;
      const text = response.text();

      if (!text) {
        throw new Error('Empty response from Gemini');
      }

      console.log('‚úÖ Gemini response received');

      return {
        success: true,
        message: text.trim(),
        model: this.model,
        usage: {
          prompt_tokens: prompt.length,
          completion_tokens: text.length,
          total_tokens: prompt.length + text.length
        }
      };

    } catch (error) {
      console.error('‚ùå Gemini API error:', error);
      
      // Handle specific Gemini errors
      if (error.message?.includes('API_KEY_INVALID')) {
        return {
          success: false,
          error: 'API key kh√¥ng h·ª£p l·ªá'
        };
      }
      
      if (error.message?.includes('QUOTA_EXCEEDED')) {
        return {
          success: false,
          error: 'ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n API'
        };
      }

      if (error.message?.includes('SAFETY')) {
        return {
          success: false,
          error: 'N·ªôi dung kh√¥ng ph√π h·ª£p v·ªõi ch√≠nh s√°ch an to√†n'
        };
      }

      return {
        success: false,
        error: error.message || 'L·ªói k·∫øt n·ªëi v·ªõi Gemini AI'
      };
    }
  }

  // Get security tips
  async getSecurityTips(category = 'general') {
    const prompts = {
      general: 'ƒê∆∞a ra 5 l·ªùi khuy√™n b·∫£o m·∫≠t m·∫°ng quan tr·ªçng nh·∫•t cho ng∆∞·ªùi d√πng Vi·ªát Nam',
      password: 'H∆∞·ªõng d·∫´n t·∫°o v√† qu·∫£n l√Ω m·∫≠t kh·∫©u an to√†n',
      phishing: 'C√°ch nh·∫≠n bi·∫øt v√† ph√≤ng tr√°nh email phishing',
      social: 'B·∫£o m·∫≠t th√¥ng tin c√° nh√¢n tr√™n m·∫°ng x√£ h·ªôi',
      wifi: 'An to√†n khi s·ª≠ d·ª•ng WiFi c√¥ng c·ªông'
    };

    const prompt = prompts[category] || prompts.general;
    return await this.sendMessage(prompt);
  }

  // Get conversation starters
  getConversationStarters() {
    return [
      {
        id: 1,
        text: "L√†m th·∫ø n√†o ƒë·ªÉ nh·∫≠n bi·∫øt email l·ª´a ƒë·∫£o?",
        category: "phishing"
      },
      {
        id: 2,
        text: "C√°ch t·∫°o m·∫≠t kh·∫©u m·∫°nh v√† an to√†n",
        category: "password"
      },
      {
        id: 3,
        text: "Ki·ªÉm tra t√≠nh an to√†n c·ªßa m·ªôt website",
        category: "website"
      },
      {
        id: 4,
        text: "B·∫£o v·ªá th√¥ng tin c√° nh√¢n tr√™n m·∫°ng x√£ h·ªôi",
        category: "privacy"
      },
      {
        id: 5,
        text: "An to√†n khi s·ª≠ d·ª•ng WiFi c√¥ng c·ªông",
        category: "wifi"
      },
      {
        id: 6,
        text: "C√°ch ph√≤ng tr√°nh malware v√† virus",
        category: "malware"
      }
    ];
  }

  // Check if service is available
  isAvailable() {
    return this.generativeModel !== null;
  }

  // Get service status
  getStatus() {
    return {
      provider: 'gemini',
      model: this.model,
      available: this.isAvailable(),
      apiKey: this.apiKey ? 'configured' : 'missing'
    };
  }
}

module.exports = new GeminiService();
