const geminiService = require('./geminiService');
const openaiService = require('./openaiService');

class AIService {
  constructor() {
    this.primaryProvider = process.env.AI_PROVIDER || 'gemini';
    this.providers = {
      gemini: geminiService,
      openai: openaiService
    };
    
    console.log(`ü§ñ AI Service initialized with primary provider: ${this.primaryProvider}`);
  }

  // Get the current active provider
  getActiveProvider() {
    const primary = this.providers[this.primaryProvider];
    if (primary && primary.isAvailable()) {
      return {
        name: this.primaryProvider,
        service: primary
      };
    }

    // Fallback to other providers
    for (const [name, service] of Object.entries(this.providers)) {
      if (name !== this.primaryProvider && service.isAvailable()) {
        console.log(`‚ö†Ô∏è Falling back to ${name} provider`);
        return {
          name,
          service
        };
      }
    }

    return null;
  }

  // Send message with automatic provider fallback
  async sendMessage(message, conversationHistory = []) {
    const provider = this.getActiveProvider();
    
    if (!provider) {
      console.error('‚ùå No AI providers available');
      return {
        success: false,
        error: 'D·ªãch v·ª• AI t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng'
      };
    }

    try {
      console.log(`ü§ñ Using ${provider.name} provider`);
      const result = await provider.service.sendMessage(message, conversationHistory);
      
      if (result.success) {
        return {
          ...result,
          provider: provider.name
        };
      }

      // If primary provider fails, try fallback
      if (provider.name === this.primaryProvider) {
        console.log(`‚ö†Ô∏è ${provider.name} failed, trying fallback...`);
        return await this.sendMessageWithFallback(message, conversationHistory);
      }

      return result;

    } catch (error) {
      console.error(`‚ùå ${provider.name} error:`, error);
      
      // Try fallback provider
      if (provider.name === this.primaryProvider) {
        return await this.sendMessageWithFallback(message, conversationHistory);
      }

      return {
        success: false,
        error: 'L·ªói k·∫øt n·ªëi v·ªõi d·ªãch v·ª• AI'
      };
    }
  }

  // Send message with fallback to other providers
  async sendMessageWithFallback(message, conversationHistory = []) {
    for (const [name, service] of Object.entries(this.providers)) {
      if (name === this.primaryProvider) continue;
      
      if (service.isAvailable()) {
        try {
          console.log(`üîÑ Trying fallback provider: ${name}`);
          const result = await service.sendMessage(message, conversationHistory);
          
          if (result.success) {
            return {
              ...result,
              provider: name,
              fallback: true
            };
          }
        } catch (error) {
          console.error(`‚ùå Fallback ${name} failed:`, error);
          continue;
        }
      }
    }

    // If all providers fail, return mock response
    console.log('üîÑ All AI providers failed, using mock response');
    return this.generateMockResponse(message);
  }

  // Generate mock response as last resort
  generateMockResponse(message) {
    const lowerMessage = message.toLowerCase();

    if (lowerMessage.includes('phishing') || lowerMessage.includes('l·ª´a ƒë·∫£o')) {
      return {
        success: true,
        message: `üé£ **Nh·∫≠n bi·∫øt Email Phishing - FactCheck AI**

**üö® D·∫•u hi·ªáu c·∫£nh b√°o:**
‚Ä¢ **ƒê·ªãa ch·ªâ g·ª≠i l·∫°**: vietcombank-security@gmail.com thay v√¨ @vietcombank.com.vn
‚Ä¢ **T·∫°o √°p l·ª±c**: "T√†i kho·∫£n s·∫Ω b·ªã kh√≥a trong 24h"
‚Ä¢ **Y√™u c·∫ßu th√¥ng tin**: Ng√¢n h√†ng KH√îNG BAO GI·ªú h·ªèi m·∫≠t kh·∫©u qua email
‚Ä¢ **Link r√∫t g·ªçn**: bit.ly, tinyurl thay v√¨ domain ch√≠nh th·ª©c

**‚úÖ C√°ch ph√≤ng ch·ªëng:**
1. Lu√¥n g√µ tr·ª±c ti·∫øp website ng√¢n h√†ng
2. Ki·ªÉm tra URL c√≥ HTTPS v√† t√™n mi·ªÅn ch√≠nh x√°c
3. G·ªçi hotline ng√¢n h√†ng ƒë·ªÉ x√°c minh`,
        provider: 'mock',
        model: 'fallback'
      };
    }

    if (lowerMessage.includes('m·∫≠t kh·∫©u') || lowerMessage.includes('password')) {
      return {
        success: true,
        message: `üîê **T·∫°o M·∫≠t kh·∫©u Si√™u M·∫°nh - FactCheck AI**

**üìè Quy t·∫Øc v√†ng:**
‚Ä¢ **ƒê·ªô d√†i**: T·ªëi thi·ªÉu 12 k√Ω t·ª± (khuy·∫øn ngh·ªã 16+)
‚Ä¢ **ƒêa d·∫°ng**: Ch·ªØ HOA, th∆∞·ªùng, s·ªë, k√Ω t·ª± ƒë·∫∑c bi·ªát
‚Ä¢ **Tr√°nh**: T√™n, ng√†y sinh, "123456", "password"
‚Ä¢ **Unique**: M·ªói t√†i kho·∫£n 1 m·∫≠t kh·∫©u ri√™ng

**üõ°Ô∏è B·∫£o m·∫≠t n√¢ng cao:**
‚Ä¢ **2FA**: Google Authenticator, SMS
‚Ä¢ **Password Manager**: Bitwarden (mi·ªÖn ph√≠), 1Password`,
        provider: 'mock',
        model: 'fallback'
      };
    }

    return {
      success: true,
      message: `üõ°Ô∏è **Ch√†o b·∫°n! T√¥i l√† FactCheck AI**

T√¥i l√† chuy√™n gia b·∫£o m·∫≠t AI h√†ng ƒë·∫ßu Vi·ªát Nam, s·∫µn s√†ng gi√∫p b·∫°n v·ªÅ:

üîí **B·∫£o m·∫≠t m·∫°ng** & An to√†n th√¥ng tin
üé£ **Phishing** & L·ª´a ƒë·∫£o tr·ª±c tuy·∫øn
ü¶† **Malware** & Virus
üåê **Ki·ªÉm tra URL** & Website

B·∫°n c√≥ c√¢u h·ªèi g√¨ v·ªÅ b·∫£o m·∫≠t kh√¥ng?`,
      provider: 'mock',
      model: 'fallback'
    };
  }

  // Get security tips
  async getSecurityTips(category = 'general') {
    const provider = this.getActiveProvider();
    
    if (!provider) {
      return {
        success: false,
        error: 'D·ªãch v·ª• AI t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng'
      };
    }

    return await provider.service.getSecurityTips(category);
  }

  // Get conversation starters
  getConversationStarters() {
    const provider = this.getActiveProvider();
    
    if (!provider) {
      return [];
    }

    return provider.service.getConversationStarters();
  }

  // Validate message
  validateMessage(message) {
    const provider = this.getActiveProvider();
    
    if (!provider) {
      return {
        valid: false,
        error: 'D·ªãch v·ª• AI t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng'
      };
    }

    return provider.service.validateMessage(message);
  }

  // Get service status
  getStatus() {
    const status = {
      primary: this.primaryProvider,
      providers: {}
    };

    for (const [name, service] of Object.entries(this.providers)) {
      try {
        console.log(`üîç Getting status for ${name} service...`);
        console.log(`üîç Service type:`, typeof service);
        console.log(`üîç Service methods:`, Object.getOwnPropertyNames(service));

        if (service && typeof service.getStatus === 'function') {
          status.providers[name] = service.getStatus();
        } else {
          status.providers[name] = {
            provider: name,
            available: false,
            error: 'getStatus method not available'
          };
        }
      } catch (error) {
        console.error(`‚ùå Error getting status for ${name}:`, error);
        status.providers[name] = {
          provider: name,
          available: false,
          error: error.message
        };
      }
    }

    return status;
  }
}

module.exports = new AIService();
