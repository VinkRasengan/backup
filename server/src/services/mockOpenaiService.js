// Mock OpenAI Service for testing when quota is exceeded
class MockOpenAIService {
  constructor() {
    this.model = 'mock-gpt-3.5-turbo';
    this.systemPrompt = `B·∫°n l√† m·ªôt chuy√™n gia b·∫£o m·∫≠t m·∫°ng v√† ph√¢n t√≠ch m·ªëi ƒëe d·ªça tr·ª±c tuy·∫øn.`;
  }

  isConfigured() {
    return true; // Always return true for mock
  }

  async sendMessage(userMessage, conversationHistory = []) {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1000));

    // Generate mock responses based on keywords
    let mockResponse = this.generateMockResponse(userMessage);

    return {
      success: true,
      message: mockResponse,
      usage: {
        prompt_tokens: 50,
        completion_tokens: 100,
        total_tokens: 150
      },
      model: this.model
    };
  }

  generateMockResponse(message) {
    const lowerMessage = message.toLowerCase();

    if (lowerMessage.includes('phishing') || lowerMessage.includes('l·ª´a ƒë·∫£o')) {
      return `üé£ **C√°ch nh·∫≠n bi·∫øt email phishing:**

1. **Ki·ªÉm tra ƒë·ªãa ch·ªâ g·ª≠i**: Email phishing th∆∞·ªùng s·ª≠ d·ª•ng ƒë·ªãa ch·ªâ gi·∫£ m·∫°o ho·∫∑c t√™n mi·ªÅn t∆∞∆°ng t·ª± c√°c t·ªï ch·ª©c uy t√≠n.

2. **N·ªôi dung kh·∫©n c·∫•p**: Th∆∞·ªùng t·∫°o c·∫£m gi√°c c·∫•p b√°ch nh∆∞ "t√†i kho·∫£n s·∫Ω b·ªã kh√≥a", "c·∫ßn x√°c minh ngay".

3. **Li√™n k·∫øt ƒë√°ng ng·ªù**: Hover chu·ªôt l√™n link ƒë·ªÉ xem URL th·ª±c. Phishing th∆∞·ªùng d√πng URL r√∫t g·ªçn ho·∫∑c t√™n mi·ªÅn gi·∫£.

4. **Y√™u c·∫ßu th√¥ng tin c√° nh√¢n**: Ng√¢n h√†ng, t·ªï ch·ª©c uy t√≠n kh√¥ng bao gi·ªù y√™u c·∫ßu m·∫≠t kh·∫©u qua email.

5. **L·ªói ch√≠nh t·∫£**: Email phishing th∆∞·ªùng c√≥ nhi·ªÅu l·ªói ng·ªØ ph√°p, ch√≠nh t·∫£.

**L·ªùi khuy√™n**: Lu√¥n truy c·∫≠p tr·ª±c ti·∫øp website ch√≠nh th·ª©c thay v√¨ click link trong email ƒë√°ng ng·ªù.`;
    }

    if (lowerMessage.includes('m·∫≠t kh·∫©u') || lowerMessage.includes('password')) {
      return `üîê **C√°ch t·∫°o m·∫≠t kh·∫©u m·∫°nh:**

1. **ƒê·ªô d√†i**: T·ªëi thi·ªÉu 12 k√Ω t·ª±, c√†ng d√†i c√†ng t·ªët.

2. **K·∫øt h·ª£p ƒëa d·∫°ng**: 
   - Ch·ªØ hoa (A-Z)
   - Ch·ªØ th∆∞·ªùng (a-z) 
   - S·ªë (0-9)
   - K√Ω t·ª± ƒë·∫∑c bi·ªát (!@#$%^&*)

3. **Tr√°nh th√¥ng tin c√° nh√¢n**: Kh√¥ng d√πng t√™n, ng√†y sinh, s·ªë ƒëi·ªán tho·∫°i.

4. **Unique cho m·ªói t√†i kho·∫£n**: M·ªói website/app m·ªôt m·∫≠t kh·∫©u ri√™ng.

5. **S·ª≠ d·ª•ng Password Manager**: LastPass, 1Password, Bitwarden ƒë·ªÉ qu·∫£n l√Ω.

**V√≠ d·ª• m·∫≠t kh·∫©u m·∫°nh**: MyC@t15Fluffy&Cute2024!

**L·ªùi khuy√™n**: B·∫≠t 2FA (x√°c th·ª±c 2 b∆∞·ªõc) cho t·∫•t c·∫£ t√†i kho·∫£n quan tr·ªçng.`;
    }

    if (lowerMessage.includes('malware') || lowerMessage.includes('virus')) {
      return `ü¶† **C√°ch b·∫£o v·ªá kh·ªèi malware:**

1. **Antivirus**: C√†i ƒë·∫∑t ph·∫ßn m·ªÅm di·ªát virus uy t√≠n (Windows Defender, Kaspersky, Bitdefender).

2. **C·∫≠p nh·∫≠t h·ªá ƒëi·ªÅu h√†nh**: Lu√¥n c√†i ƒë·∫∑t b·∫£n v√° b·∫£o m·∫≠t m·ªõi nh·∫•t.

3. **Tr√°nh ngu·ªìn kh√¥ng tin c·∫≠y**:
   - Kh√¥ng t·∫£i ph·∫ßn m·ªÅm t·ª´ website l·∫°
   - Kh√¥ng m·ªü file ƒë√≠nh k√®m ƒë√°ng ng·ªù
   - Tr√°nh USB/·ªï c·ª©ng kh√¥ng r√µ ngu·ªìn g·ªëc

4. **Backup d·ªØ li·ªáu**: Sao l∆∞u ƒë·ªãnh k·ª≥ ƒë·ªÉ ph√≤ng ransomware.

5. **Firewall**: B·∫≠t t∆∞·ªùng l·ª≠a c·ªßa h·ªá ƒëi·ªÅu h√†nh.

**D·∫•u hi·ªáu nhi·ªÖm malware**: M√°y ch·∫°y ch·∫≠m, popup qu·∫£ng c√°o, file b·ªã m√£ h√≥a, ho·∫°t ƒë·ªông m·∫°ng b·∫•t th∆∞·ªùng.

**Khuy√™n**: Scan ƒë·ªãnh k·ª≥ v√† gi·ªØ ph·∫ßn m·ªÅm lu√¥n c·∫≠p nh·∫≠t.`;
    }

    if (lowerMessage.includes('wifi') || lowerMessage.includes('m·∫°ng')) {
      return `üì∂ **B·∫£o m·∫≠t m·∫°ng WiFi:**

1. **M√£ h√≥a WPA3**: S·ª≠ d·ª•ng chu·∫©n b·∫£o m·∫≠t m·ªõi nh·∫•t cho router.

2. **M·∫≠t kh·∫©u WiFi m·∫°nh**: T·ªëi thi·ªÉu 15 k√Ω t·ª±, k·∫øt h·ª£p ch·ªØ s·ªë k√Ω t·ª±.

3. **ƒê·ªïi m·∫≠t kh·∫©u admin router**: Kh√¥ng d√πng m·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh.

4. **T·∫Øt WPS**: T√≠nh nƒÉng n√†y d·ªÖ b·ªã t·∫•n c√¥ng.

5. **·∫®n t√™n m·∫°ng (SSID)**: Kh√¥ng broadcast t√™n WiFi.

6. **C·∫≠p nh·∫≠t firmware router**: Th∆∞·ªùng xuy√™n c·∫≠p nh·∫≠t ph·∫ßn m·ªÅm router.

**Khi d√πng WiFi c√¥ng c·ªông**: S·ª≠ d·ª•ng VPN, tr√°nh truy c·∫≠p t√†i kho·∫£n ng√¢n h√†ng, kh√¥ng t·ª± ƒë·ªông k·∫øt n·ªëi.

**L·ªùi khuy√™n**: Thi·∫øt l·∫≠p m·∫°ng Guest ri√™ng cho kh√°ch v√† thi·∫øt b·ªã IoT.`;
    }

    if (lowerMessage.includes('social') || lowerMessage.includes('m·∫°ng x√£ h·ªôi')) {
      return `üì± **B·∫£o m·∫≠t m·∫°ng x√£ h·ªôi:**

1. **C√†i ƒë·∫∑t ri√™ng t∆∞**: Ch·ªâ b·∫°n b√® m·ªõi xem ƒë∆∞·ª£c th√¥ng tin c√° nh√¢n.

2. **Ki·ªÉm so√°t th√¥ng tin chia s·∫ª**:
   - Kh√¥ng ƒëƒÉng ƒë·ªãa ch·ªâ nh√†, s·ªë ƒëi·ªán tho·∫°i
   - Tr√°nh check-in v·ªã tr√≠ th·ªùi gian th·ª±c
   - C·∫©n th·∫≠n v·ªõi ·∫£nh c√≥ th√¥ng tin nh·∫°y c·∫£m

3. **X√°c th·ª±c 2 b∆∞·ªõc**: B·∫≠t 2FA cho t·∫•t c·∫£ t√†i kho·∫£n.

4. **C·∫©n th·∫≠n v·ªõi l·ªùi m·ªùi k·∫øt b·∫°n**: Ch·ªâ k·∫øt b·∫°n v·ªõi ng∆∞·ªùi quen bi·∫øt.

5. **Ki·ªÉm tra app permissions**: Xem l·∫°i quy·ªÅn truy c·∫≠p c·ªßa c√°c ·ª©ng d·ª•ng.

**C·∫£nh b√°o**: Tr√°nh quiz, game y√™u c·∫ßu quy·ªÅn truy c·∫≠p th√¥ng tin c√° nh√¢n.

**L·ªùi khuy√™n**: Th∆∞·ªùng xuy√™n review v√† x√≥a b√†i ƒëƒÉng c≈© c√≥ th√¥ng tin nh·∫°y c·∫£m.`;
    }

    // Default response
    return `üõ°Ô∏è **Ch√†o b·∫°n!** 

T√¥i l√† tr·ª£ l√Ω AI chuy√™n v·ªÅ b·∫£o m·∫≠t m·∫°ng. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ:

‚Ä¢ **Phishing & L·ª´a ƒë·∫£o**: C√°ch nh·∫≠n bi·∫øt v√† ph√≤ng tr√°nh
‚Ä¢ **M·∫≠t kh·∫©u**: T·∫°o v√† qu·∫£n l√Ω m·∫≠t kh·∫©u an to√†n  
‚Ä¢ **Malware**: B·∫£o v·ªá kh·ªèi virus v√† ph·∫ßn m·ªÅm ƒë·ªôc h·∫°i
‚Ä¢ **B·∫£o m·∫≠t WiFi**: Thi·∫øt l·∫≠p m·∫°ng an to√†n
‚Ä¢ **M·∫°ng x√£ h·ªôi**: B·∫£o v·ªá th√¥ng tin c√° nh√¢n
‚Ä¢ **Ph√¢n t√≠ch URL**: ƒê√°nh gi√° t√≠nh an to√†n c·ªßa website

B·∫°n c√≥ c√¢u h·ªèi c·ª• th·ªÉ n√†o v·ªÅ b·∫£o m·∫≠t kh√¥ng? T√¥i s·∫Ω cung c·∫•p l·ªùi khuy√™n chi ti·∫øt v√† th·ª±c t·∫ø.

*L∆∞u √Ω: ƒê√¢y l√† phi√™n b·∫£n demo. ƒê·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng AI, vui l√≤ng c·∫•u h√¨nh OpenAI API key.*`;
  }

  async analyzeUrlSecurity(url, virusTotalData = null) {
    await new Promise(resolve => setTimeout(resolve, 800));

    let analysis = `üîç **Ph√¢n t√≠ch b·∫£o m·∫≠t URL**: ${url}

**ƒê√°nh gi√° c·∫•u tr√∫c URL:**
- Protocol: ${url.startsWith('https') ? '‚úÖ HTTPS (An to√†n)' : '‚ö†Ô∏è HTTP (Kh√¥ng m√£ h√≥a)'}
- Domain: ${new URL(url).hostname}
- C·∫•u tr√∫c: ${url.includes('suspicious') ? '‚ö†Ô∏è C√≥ d·∫•u hi·ªáu ƒë√°ng ng·ªù' : '‚úÖ B√¨nh th∆∞·ªùng'}

**Khuy·∫øn ngh·ªã:**
1. Lu√¥n ki·ªÉm tra ch√≠nh t·∫£ domain
2. Tr√°nh click link r√∫t g·ªçn kh√¥ng r√µ ngu·ªìn g·ªëc
3. S·ª≠ d·ª•ng bookmark cho c√°c trang quan tr·ªçng`;

    if (virusTotalData?.success) {
      analysis += `

**Th√¥ng tin t·ª´ VirusTotal:**
- ƒêi·ªÉm b·∫£o m·∫≠t: ${virusTotalData.securityScore}/100
- Tr·∫°ng th√°i: ${virusTotalData.threats.malicious ? 'üö® Ph√°t hi·ªán m·ªëi ƒëe d·ªça' : '‚úÖ Kh√¥ng ph√°t hi·ªán m·ªëi ƒëe d·ªça'}`;
    }

    return {
      success: true,
      message: analysis
    };
  }

  async getSecurityTips(category = 'general') {
    await new Promise(resolve => setTimeout(resolve, 500));

    const tips = {
      general: `üõ°Ô∏è **5 L·ªùi khuy√™n b·∫£o m·∫≠t quan tr·ªçng:**

1. **C·∫≠p nh·∫≠t th∆∞·ªùng xuy√™n**: H·ªá ƒëi·ªÅu h√†nh, tr√¨nh duy·ªát, ·ª©ng d·ª•ng
2. **M·∫≠t kh·∫©u m·∫°nh + 2FA**: Unique cho m·ªói t√†i kho·∫£n
3. **Backup d·ªØ li·ªáu**: Sao l∆∞u ƒë·ªãnh k·ª≥, test kh√¥i ph·ª•c
4. **C·∫©n th·∫≠n v·ªõi email**: Kh√¥ng click link/attachment ƒë√°ng ng·ªù  
5. **Antivirus**: C√†i ƒë·∫∑t v√† c·∫≠p nh·∫≠t ph·∫ßn m·ªÅm b·∫£o v·ªá`,

      phishing: `üé£ **Nh·∫≠n bi·∫øt Phishing:**

‚Ä¢ Email kh·∫©n c·∫•p y√™u c·∫ßu th√¥ng tin c√° nh√¢n
‚Ä¢ URL gi·∫£ m·∫°o (vd: arnazon.com thay v√¨ amazon.com)
‚Ä¢ L·ªói ch√≠nh t·∫£, ng·ªØ ph√°p nhi·ªÅu
‚Ä¢ Y√™u c·∫ßu t·∫£i file ƒë√≠nh k√®m l·∫°
‚Ä¢ ƒêe d·ªça kh√≥a t√†i kho·∫£n n·∫øu kh√¥ng h√†nh ƒë·ªông`,

      malware: `ü¶† **Ph√≤ng ch·ªëng Malware:**

‚Ä¢ Ch·ªâ t·∫£i ph·∫ßn m·ªÅm t·ª´ ngu·ªìn ch√≠nh th·ª©c
‚Ä¢ Scan file tr∆∞·ªõc khi m·ªü
‚Ä¢ Tr√°nh crack, keygen
‚Ä¢ Backup d·ªØ li·ªáu ƒë·ªãnh k·ª≥
‚Ä¢ C·∫≠p nh·∫≠t h·ªá ƒëi·ªÅu h√†nh v√† antivirus`
    };

    return {
      success: true,
      message: tips[category] || tips.general
    };
  }

  validateMessage(message) {
    if (!message || typeof message !== 'string') {
      return { valid: false, error: 'Tin nh·∫Øn kh√¥ng h·ª£p l·ªá' };
    }

    const trimmedMessage = message.trim();
    
    if (trimmedMessage.length === 0) {
      return { valid: false, error: 'Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng' };
    }

    if (trimmedMessage.length > 1000) {
      return { valid: false, error: 'Tin nh·∫Øn qu√° d√†i (t·ªëi ƒëa 1000 k√Ω t·ª±)' };
    }

    return { valid: true, message: trimmedMessage };
  }

  getConversationStarters() {
    return [
      "L√†m th·∫ø n√†o ƒë·ªÉ nh·∫≠n bi·∫øt email l·ª´a ƒë·∫£o?",
      "C√°ch t·∫°o m·∫≠t kh·∫©u m·∫°nh v√† an to√†n?",
      "Ph·∫ßn m·ªÅm di·ªát virus n√†o t·ªët nh·∫•t?",
      "C√°ch b·∫£o v·ªá th√¥ng tin c√° nh√¢n tr√™n m·∫°ng?",
      "D·∫•u hi·ªáu nh·∫≠n bi·∫øt website gi·∫£ m·∫°o?",
      "C√°ch b·∫£o m·∫≠t t√†i kho·∫£n m·∫°ng x√£ h·ªôi?",
      "Ph·∫£i l√†m g√¨ khi b·ªã hack t√†i kho·∫£n?",
      "C√°ch ki·ªÉm tra link c√≥ an to√†n kh√¥ng?"
    ];
  }
}

module.exports = new MockOpenAIService();
