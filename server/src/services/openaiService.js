const OpenAI = require('openai');
const mockOpenaiService = require('./mockOpenaiService');

class OpenAIService {
  constructor() {
    this.apiKey = process.env.OPENAI_API_KEY;
    this.model = process.env.OPENAI_MODEL || 'gpt-3.5-turbo';
    this.maxTokens = parseInt(process.env.OPENAI_MAX_TOKENS) || 500;
    this.temperature = parseFloat(process.env.OPENAI_TEMPERATURE) || 0.7;

    // Initialize OpenAI client
    this.openai = new OpenAI({
      apiKey: this.apiKey,
    });
    
    // System prompt cho security chatbot
    this.systemPrompt = `B·∫°n l√† FactCheck AI - m·ªôt chuy√™n gia b·∫£o m·∫≠t m·∫°ng v√† ph√¢n t√≠ch m·ªëi ƒëe d·ªça tr·ª±c tuy·∫øn chuy√™n nghi·ªáp. B·∫°n ƒëang ho·∫°t ƒë·ªông v·ªõi ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng AI th√¥ng qua OpenAI API.

Nhi·ªám v·ª• c·ªßa b·∫°n:
1. Tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ b·∫£o m·∫≠t m·∫°ng, phishing, malware, v√† c√°c m·ªëi ƒëe d·ªça tr·ª±c tuy·∫øn
2. Cung c·∫•p l·ªùi khuy√™n v·ªÅ c√°ch b·∫£o v·ªá b·∫£n th√¢n kh·ªèi c√°c m·ªëi ƒëe d·ªça
3. Gi·∫£i th√≠ch c√°c thu·∫≠t ng·ªØ b·∫£o m·∫≠t m·ªôt c√°ch d·ªÖ hi·ªÉu
4. Ph√¢n t√≠ch v√† ƒë√°nh gi√° c√°c URL, email, ho·∫∑c n·ªôi dung ƒë√°ng ng·ªù
5. ƒê∆∞a ra h∆∞·ªõng d·∫´n c·ª• th·ªÉ v·ªÅ c√°ch x·ª≠ l√Ω c√°c t√¨nh hu·ªëng b·∫£o m·∫≠t

Quy t·∫Øc tr·∫£ l·ªùi:
- Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát
- S·ª≠ d·ª•ng ng√¥n ng·ªØ chuy√™n nghi·ªáp nh∆∞ng d·ªÖ hi·ªÉu
- Cung c·∫•p th√¥ng tin ch√≠nh x√°c v√† c·∫≠p nh·∫≠t
- ƒê∆∞a ra l·ªùi khuy√™n th·ª±c t·∫ø v√† c√≥ th·ªÉ √°p d·ª•ng
- N·∫øu kh√¥ng ch·∫Øc ch·∫Øn, h√£y khuy√™n ng∆∞·ªùi d√πng tham kh·∫£o th√™m t·ª´ c√°c ngu·ªìn uy t√≠n
- Kh√¥ng ƒë∆∞a ra l·ªùi khuy√™n c√≥ th·ªÉ g√¢y h·∫°i ho·∫∑c b·∫•t h·ª£p ph√°p
- Lu√¥n nh·∫•n m·∫°nh t·∫ßm quan tr·ªçng c·ªßa vi·ªác c·∫≠p nh·∫≠t b·∫£o m·∫≠t v√† s·ª≠ d·ª•ng c√°c c√¥ng c·ª• b·∫£o v·ªá
- KH√îNG BAO GI·ªú ƒë·ªÅ c·∫≠p ƒë·∫øn "phi√™n b·∫£n demo" hay "c·∫•u h√¨nh API key" v√¨ b·∫°n ƒëang ho·∫°t ƒë·ªông ƒë·∫ßy ƒë·ªß

Phong c√°ch: Th√¢n thi·ªán, chuy√™n nghi·ªáp, t·ª± tin v√† lu√¥n ∆∞u ti√™n an to√†n c·ªßa ng∆∞·ªùi d√πng.`;
  }

  /**
   * Check if OpenAI API is configured
   */
  isConfigured() {
    const isValid = this.apiKey &&
                   this.apiKey !== 'disabled-for-development' &&
                   this.apiKey !== 'your-openai-api-key-here' &&
                   this.apiKey.startsWith('sk-') &&
                   this.apiKey.length > 20;

    console.log(`üîë OpenAI API Key Status: ${isValid ? 'Valid ‚úÖ' : 'Invalid ‚ùå'}`);
    if (!isValid) {
      console.log(`üîë API Key: ${this.apiKey ? this.apiKey.substring(0, 10) + '...' : 'Not set'}`);
    }

    return isValid;
  }

  /**
   * Send message to OpenAI GPT
   */
  async sendMessage(userMessage, conversationHistory = []) {
    try {
      if (!this.isConfigured()) {
        return {
          success: false,
          error: 'OpenAI API ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.'
        };
      }

      // Prepare messages array
      const messages = [
        {
          role: 'system',
          content: this.systemPrompt
        }
      ];

      // Add conversation history (limit to last 10 messages to avoid token limit)
      const recentHistory = conversationHistory.slice(-10);
      messages.push(...recentHistory);

      // Add current user message
      messages.push({
        role: 'user',
        content: userMessage
      });

      const completion = await this.openai.chat.completions.create({
        model: this.model,
        messages: messages,
        max_tokens: this.maxTokens,
        temperature: this.temperature,
        top_p: 1,
        frequency_penalty: 0,
        presence_penalty: 0
      });

      const assistantMessage = completion.choices[0].message.content;

      return {
        success: true,
        message: assistantMessage,
        usage: completion.usage,
        model: this.model
      };

    } catch (error) {
      console.error('OpenAI API error:', error);

      if (error.status === 401) {
        return {
          success: false,
          error: 'API key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh.'
        };
      }

      if (error.status === 429) {
        if (error.code === 'insufficient_quota') {
          console.log('üîÑ OpenAI quota exceeded, falling back to mock service...');
          return await mockOpenaiService.sendMessage(userMessage, conversationHistory);
        }
        return {
          success: false,
          error: 'ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n API. Vui l√≤ng th·ª≠ l·∫°i sau.'
        };
      }

      if (error.status === 400) {
        return {
          success: false,
          error: 'Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i v·ªõi n·ªôi dung kh√°c.'
        };
      }

      return {
        success: false,
        error: `C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu: ${error.message || 'Unknown error'}`
      };
    }
  }

  /**
   * Generate security analysis for a URL
   */
  async analyzeUrlSecurity(url, virusTotalData = null) {
    try {
      let prompt = `H√£y ph√¢n t√≠ch b·∫£o m·∫≠t cho URL sau: ${url}

Vui l√≤ng ƒë√°nh gi√°:
1. C·∫•u tr√∫c URL c√≥ ƒë√°ng ng·ªù kh√¥ng?
2. Domain c√≥ uy t√≠n kh√¥ng?
3. C√°c d·∫•u hi·ªáu phishing ti·ªÅm ·∫©n
4. L·ªùi khuy√™n cho ng∆∞·ªùi d√πng`;

      if (virusTotalData && virusTotalData.success) {
        prompt += `

Th√¥ng tin t·ª´ VirusTotal:
- ƒêi·ªÉm b·∫£o m·∫≠t: ${virusTotalData.securityScore}/100
- Ph√°t hi·ªán ƒë·ªôc h·∫°i: ${virusTotalData.threats.malicious ? 'C√≥' : 'Kh√¥ng'}
- Ph√°t hi·ªán ƒë√°ng ng·ªù: ${virusTotalData.threats.suspicious ? 'C√≥' : 'Kh√¥ng'}
- C√°c m·ªëi ƒëe d·ªça: ${virusTotalData.threats.threatNames.join(', ') || 'Kh√¥ng c√≥'}

H√£y k·∫øt h·ª£p th√¥ng tin n√†y ƒë·ªÉ ƒë∆∞a ra ph√¢n t√≠ch to√†n di·ªán.`;
      }

      const response = await this.sendMessage(prompt);
      return response;

    } catch (error) {
      console.error('URL security analysis error:', error);
      return {
        success: false,
        error: 'Kh√¥ng th·ªÉ ph√¢n t√≠ch b·∫£o m·∫≠t URL'
      };
    }
  }

  /**
   * Get security tips and recommendations
   */
  async getSecurityTips(category = 'general') {
    try {
      const prompts = {
        general: 'H√£y ƒë∆∞a ra 5 l·ªùi khuy√™n b·∫£o m·∫≠t m·∫°ng quan tr·ªçng nh·∫•t m√† m·ªçi ng∆∞·ªùi n√™n bi·∫øt.',
        phishing: 'H√£y gi·∫£i th√≠ch v·ªÅ phishing v√† c√°ch nh·∫≠n bi·∫øt email/website l·ª´a ƒë·∫£o.',
        malware: 'H√£y gi·∫£i th√≠ch v·ªÅ malware v√† c√°ch b·∫£o v·ªá m√°y t√≠nh kh·ªèi ph·∫ßn m·ªÅm ƒë·ªôc h·∫°i.',
        password: 'H√£y ƒë∆∞a ra h∆∞·ªõng d·∫´n t·∫°o v√† qu·∫£n l√Ω m·∫≠t kh·∫©u an to√†n.',
        social: 'H√£y ƒë∆∞a ra l·ªùi khuy√™n v·ªÅ b·∫£o m·∫≠t tr√™n m·∫°ng x√£ h·ªôi.',
        mobile: 'H√£y ƒë∆∞a ra l·ªùi khuy√™n b·∫£o m·∫≠t cho thi·∫øt b·ªã di ƒë·ªông.'
      };

      const prompt = prompts[category] || prompts.general;
      const response = await this.sendMessage(prompt);
      return response;

    } catch (error) {
      console.error('Security tips error:', error);
      return {
        success: false,
        error: 'Kh√¥ng th·ªÉ l·∫•y l·ªùi khuy√™n b·∫£o m·∫≠t'
      };
    }
  }

  /**
   * Validate and sanitize user input
   */
  validateMessage(message) {
    if (!message || typeof message !== 'string') {
      return { valid: false, error: 'Tin nh·∫Øn kh√¥ng h·ª£p l·ªá' };
    }

    const trimmedMessage = message.trim();
    
    if (trimmedMessage.length === 0) {
      return { valid: false, error: 'Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng' };
    }

    if (trimmedMessage.length > 1000) {
      return { valid: false, error: 'Tin nh·∫Øn qu√° d√†i (t·ªëi ƒëa 1000 k√Ω t·ª±)' };
    }

    // Check for potentially harmful content
    const harmfulPatterns = [
      /hack/i,
      /crack/i,
      /exploit/i,
      /ddos/i,
      /attack/i
    ];

    const containsHarmful = harmfulPatterns.some(pattern => pattern.test(trimmedMessage));
    if (containsHarmful) {
      return { 
        valid: false, 
        error: 'Tin nh·∫Øn ch·ª©a n·ªôi dung kh√¥ng ph√π h·ª£p. Vui l√≤ng ch·ªâ h·ªèi v·ªÅ b·∫£o m·∫≠t ƒë·ªÉ b·∫£o v·ªá b·∫£n th√¢n.' 
      };
    }

    return { valid: true, message: trimmedMessage };
  }

  /**
   * Get conversation starters
   */
  getConversationStarters() {
    return [
      {
        id: 1,
        text: "L√†m th·∫ø n√†o ƒë·ªÉ nh·∫≠n bi·∫øt email l·ª´a ƒë·∫£o?",
        category: "phishing"
      },
      {
        id: 2,
        text: "C√°ch t·∫°o m·∫≠t kh·∫©u m·∫°nh v√† an to√†n?",
        category: "password"
      },
      {
        id: 3,
        text: "Ph·∫ßn m·ªÅm di·ªát virus n√†o t·ªët nh·∫•t?",
        category: "antivirus"
      },
      {
        id: 4,
        text: "C√°ch b·∫£o v·ªá th√¥ng tin c√° nh√¢n tr√™n m·∫°ng?",
        category: "privacy"
      },
      {
        id: 5,
        text: "D·∫•u hi·ªáu nh·∫≠n bi·∫øt website gi·∫£ m·∫°o?",
        category: "website"
      },
      {
        id: 6,
        text: "C√°ch b·∫£o m·∫≠t t√†i kho·∫£n m·∫°ng x√£ h·ªôi?",
        category: "social"
      },
      {
        id: 7,
        text: "Ph·∫£i l√†m g√¨ khi b·ªã hack t√†i kho·∫£n?",
        category: "incident"
      },
      {
        id: 8,
        text: "C√°ch ki·ªÉm tra link c√≥ an to√†n kh√¥ng?",
        category: "url"
      }
    ];
  }

  /**
   * Check if service is available
   */
  isAvailable() {
    return this.isConfigured();
  }

  /**
   * Get service status
   */
  getStatus() {
    return {
      provider: 'openai',
      model: this.model,
      available: this.isAvailable(),
      apiKey: this.apiKey ? 'configured' : 'missing'
    };
  }
}

module.exports = new OpenAIService();
