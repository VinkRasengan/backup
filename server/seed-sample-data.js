#!/usr/bin/env node

/**
 * Simple Firestore Data Seeding Script
 * Creates sample data for FactCheck features
 */

require('dotenv').config();
const admin = require('firebase-admin');

// Initialize Firebase Admin
function initializeFirebase() {
  if (!admin.apps.length) {
    const serviceAccount = {
      projectId: process.env.FIREBASE_PROJECT_ID,
      clientEmail: process.env.FIREBASE_CLIENT_EMAIL,
      privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g, '\n')
    };

    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount),
      projectId: process.env.FIREBASE_PROJECT_ID
    });
  }
  return admin.firestore();
}

// Sample data
const sampleUsers = [
  {
    id: 'user1',
    email: 'user1@example.com',
    displayName: 'Nguy·ªÖn VƒÉn A',
    firstName: 'Nguy·ªÖn',
    lastName: 'VƒÉn A',
    role: 'user',
    isVerified: true,
    createdAt: admin.firestore.Timestamp.now(),
    updatedAt: admin.firestore.Timestamp.now()
  },
  {
    id: 'user2',
    email: 'user2@example.com',
    displayName: 'Tr·∫ßn Th·ªã B',
    firstName: 'Tr·∫ßn',
    lastName: 'Th·ªã B',
    role: 'user',
    isVerified: true,
    createdAt: admin.firestore.Timestamp.now(),
    updatedAt: admin.firestore.Timestamp.now()
  }
];

const sampleLinks = [
  {
    id: 'link1',
    url: 'https://vnexpress.net/tin-gia-covid-vaccine',
    title: 'Ph√°t hi·ªán tin gi·∫£ v·ªÅ vaccine COVID-19 lan truy·ªÅn tr√™n m·∫°ng x√£ h·ªôi',
    description: 'Th√¥ng tin sai l·ªách v·ªÅ t√°c d·ª•ng ph·ª• c·ªßa vaccine ƒë∆∞·ª£c chia s·∫ª r·ªông r√£i',
    status: 'suspicious',
    credibilityScore: 25,
    submittedBy: 'user1',
    votes: { safe: 5, suspicious: 15, unsafe: 25 },
    commentsCount: 12,
    createdAt: admin.firestore.Timestamp.now(),
    updatedAt: admin.firestore.Timestamp.now()
  },
  {
    id: 'link2',
    url: 'https://tuoitre.vn/cach-nhan-biet-website-lua-dao',
    title: 'C√°ch nh·∫≠n bi·∫øt website l·ª´a ƒë·∫£o trong m√πa mua s·∫Øm online',
    description: 'H∆∞·ªõng d·∫´n chi ti·∫øt c√°ch ph√°t hi·ªán v√† tr√°nh c√°c website l·ª´a ƒë·∫£o',
    status: 'safe',
    credibilityScore: 85,
    submittedBy: 'user2',
    votes: { safe: 35, suspicious: 3, unsafe: 1 },
    commentsCount: 8,
    createdAt: admin.firestore.Timestamp.now(),
    updatedAt: admin.firestore.Timestamp.now()
  },
  {
    id: 'link3',
    url: 'https://example.com/climate-misinformation',
    title: 'Th√¥ng tin sai l·ªách v·ªÅ bi·∫øn ƒë·ªïi kh√≠ h·∫≠u ƒë∆∞·ª£c chia s·∫ª r·ªông r√£i',
    description: 'C√°c th√¥ng tin kh√¥ng ch√≠nh x√°c v·ªÅ nguy√™n nh√¢n bi·∫øn ƒë·ªïi kh√≠ h·∫≠u',
    status: 'unsafe',
    credibilityScore: 15,
    submittedBy: 'user1',
    votes: { safe: 2, suspicious: 8, unsafe: 30 },
    commentsCount: 18,
    createdAt: admin.firestore.Timestamp.now(),
    updatedAt: admin.firestore.Timestamp.now()
  }
];

const sampleComments = [
  {
    id: 'comment1',
    linkId: 'link1',
    userId: 'user1',
    content: 'Th√¥ng tin n√†y r·∫•t ƒë√°ng ng·ªù. T√¥i ƒë√£ ki·ªÉm tra v√† kh√¥ng t√¨m th·∫•y ngu·ªìn ƒë√°ng tin c·∫≠y n√†o.',
    author: { firstName: 'Nguy·ªÖn', lastName: 'VƒÉn A' },
    createdAt: admin.firestore.Timestamp.now(),
    updatedAt: admin.firestore.Timestamp.now()
  },
  {
    id: 'comment2',
    linkId: 'link2',
    userId: 'user2',
    content: 'B√†i vi·∫øt r·∫•t h·ªØu √≠ch! C·∫£m ∆°n t√°c gi·∫£ ƒë√£ chia s·∫ª.',
    author: { firstName: 'Tr·∫ßn', lastName: 'Th·ªã B' },
    createdAt: admin.firestore.Timestamp.now(),
    updatedAt: admin.firestore.Timestamp.now()
  }
];

const sampleKnowledge = [
  {
    id: 'knowledge1',
    title: 'C√°ch nh·∫≠n bi·∫øt tin gi·∫£ tr√™n m·∫°ng x√£ h·ªôi',
    description: 'H∆∞·ªõng d·∫´n chi ti·∫øt v·ªÅ c√°c d·∫•u hi·ªáu nh·∫≠n bi·∫øt tin gi·∫£ v√† c√°ch x√°c minh th√¥ng tin.',
    category: 'basics',
    content: `
## C√°c d·∫•u hi·ªáu nh·∫≠n bi·∫øt tin gi·∫£

### 1. Ki·ªÉm tra ngu·ªìn th√¥ng tin
- Xem x√©t ƒë·ªô uy t√≠n c·ªßa trang web
- Ki·ªÉm tra th√¥ng tin v·ªÅ t√°c gi·∫£
- T√¨m hi·ªÉu l·ªãch s·ª≠ c·ªßa ngu·ªìn tin

### 2. Ph√¢n t√≠ch n·ªôi dung
- Ch√∫ √Ω ƒë·∫øn ng√¥n ng·ªØ c·∫£m x√∫c qu√° m·ª©c
- Ki·ªÉm tra t√≠nh logic c·ªßa th√¥ng tin
- So s√°nh v·ªõi c√°c ngu·ªìn kh√°c

### 3. X√°c minh b·∫±ng c√¥ng c·ª•
- S·ª≠ d·ª•ng Google Reverse Image Search
- Ki·ªÉm tra tr√™n c√°c trang fact-check
- T√¨m ki·∫øm th√¥ng tin g·ªëc
    `,
    readTime: '5 ph√∫t',
    views: 1250,
    featured: true,
    createdAt: admin.firestore.Timestamp.now(),
    updatedAt: admin.firestore.Timestamp.now()
  },
  {
    id: 'knowledge2',
    title: 'B·∫£o m·∫≠t th√¥ng tin c√° nh√¢n tr√™n Internet',
    description: 'C√°c bi·ªán ph√°p b·∫£o v·ªá th√¥ng tin c√° nh√¢n khi s·ª≠ d·ª•ng Internet.',
    category: 'security',
    content: `
## B·∫£o m·∫≠t th√¥ng tin c√° nh√¢n

### 1. S·ª≠ d·ª•ng m·∫≠t kh·∫©u m·∫°nh
- T·ªëi thi·ªÉu 8 k√Ω t·ª±
- K·∫øt h·ª£p ch·ªØ hoa, ch·ªØ th∆∞·ªùng, s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát
- Kh√¥ng s·ª≠ d·ª•ng th√¥ng tin c√° nh√¢n

### 2. X√°c th·ª±c hai y·∫øu t·ªë (2FA)
- K√≠ch ho·∫°t 2FA cho c√°c t√†i kho·∫£n quan tr·ªçng
- S·ª≠ d·ª•ng ·ª©ng d·ª•ng authenticator
- Backup codes an to√†n

### 3. C·∫©n th·∫≠n v·ªõi th√¥ng tin chia s·∫ª
- H·∫°n ch·∫ø th√¥ng tin c√° nh√¢n tr√™n m·∫°ng x√£ h·ªôi
- Ki·ªÉm tra c√†i ƒë·∫∑t ri√™ng t∆∞
- Kh√¥ng chia s·∫ª th√¥ng tin nh·∫°y c·∫£m
    `,
    readTime: '7 ph√∫t',
    views: 890,
    featured: false,
    createdAt: admin.firestore.Timestamp.now(),
    updatedAt: admin.firestore.Timestamp.now()
  }
];

async function seedData() {
  console.log('üöÄ Starting Firestore data seeding...');

  try {
    const db = initializeFirebase();
    console.log('‚úÖ Firebase initialized');

    // Seed Users
    console.log('üë• Creating users...');
    for (const user of sampleUsers) {
      await db.collection('users').doc(user.id).set(user);
      console.log(`‚úÖ Created user: ${user.displayName}`);
    }

    // Seed Links (Community Posts)
    console.log('üîó Creating community posts...');
    for (const link of sampleLinks) {
      await db.collection('links').doc(link.id).set(link);
      console.log(`‚úÖ Created link: ${link.title}`);
    }

    // Seed Comments
    console.log('üí¨ Creating comments...');
    for (const comment of sampleComments) {
      await db.collection('comments').doc(comment.id).set(comment);
      console.log(`‚úÖ Created comment: ${comment.id}`);
    }

    // Seed Knowledge Base
    console.log('üìö Creating knowledge articles...');
    for (const article of sampleKnowledge) {
      await db.collection('knowledge').doc(article.id).set(article);
      console.log(`‚úÖ Created article: ${article.title}`);
    }

    console.log('\nüéâ Data seeding completed successfully!');
    console.log('\nüìä Summary:');
    console.log(`- Users: ${sampleUsers.length}`);
    console.log(`- Community Posts: ${sampleLinks.length}`);
    console.log(`- Comments: ${sampleComments.length}`);
    console.log(`- Knowledge Articles: ${sampleKnowledge.length}`);

  } catch (error) {
    console.error('‚ùå Seeding failed:', error);
    process.exit(1);
  }
}

// Run seeding
if (require.main === module) {
  seedData();
}

module.exports = { seedData };
