# Optimized Multi-stage build for Node.js microservices
FROM node:18-alpine AS base

# Install security updates and required packages
RUN apk update && apk upgrade && \
    apk add --no-cache dumb-init curl && \
    rm -rf /var/cache/apk/*

# Create app directory
WORKDIR /app

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Copy package files for better caching
COPY package*.json ./

# Dependencies stage - production only
FROM base AS deps
RUN npm ci --only=production --silent && \
    npm cache clean --force && \
    rm -rf ~/.npm

# Build dependencies stage
FROM base AS build-deps
RUN npm ci --silent

# Build stage
FROM build-deps AS build
COPY . .
RUN npm run build 2>/dev/null || echo "No build script found" && \
    rm -rf node_modules

# Production stage
FROM base AS production

# Copy production dependencies
COPY --from=deps --chown=nodejs:nodejs /app/node_modules ./node_modules

# Copy application code
COPY --chown=nodejs:nodejs . .

# Copy built assets if they exist (conditional copy using shell)
RUN mkdir -p ./dist
COPY --from=build --chown=nodejs:nodejs /app/dist/ ./dist/

# Remove unnecessary files
RUN rm -rf ./tests/ ./docs/ ./*.md ./.git* && \
    chown -R nodejs:nodejs /app

# Switch to non-root user
USER nodejs

# Expose port (will be overridden by service-specific port)
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Start the application
CMD ["dumb-init", "node", "src/app.js"]