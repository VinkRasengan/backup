import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Heart, Reply, MoreHorizontal, Send } from 'lucide-react';
import { useTheme } from '../../context/ThemeContext';

const CommentsSection = ({ postId, linkId, initialCommentCount = 0, onClose }) => {
  const { isDarkMode } = useTheme();
  const id = postId || linkId;
  const [comments, setComments] = useState([]);
  const [newComment, setNewComment] = useState('');
  const [loading, setLoading] = useState(false);

  // Generate demo comments based on postId for uniqueness
  const generateDemoComments = (postId) => {
    const commentTemplates = [
      {
        names: ['Nguy·ªÖn VƒÉn A', 'Tr·∫ßn Minh B', 'L√™ Th·ªã C', 'Ph·∫°m ƒê·ª©c D', 'Ho√†ng Mai E'],
        contents: [
          'B√†i vi·∫øt r·∫•t hay v√† b·ªï √≠ch! C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª üëç',
          'Th√¥ng tin r·∫•t h·ªØu √≠ch, m√¨nh ƒë√£ h·ªçc ƒë∆∞·ª£c nhi·ªÅu ƒëi·ªÅu m·ªõi!',
          'C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª ki·∫øn th·ª©c qu√Ω b√°u n√†y üôè',
          'N·ªôi dung r·∫•t ch·∫•t l∆∞·ª£ng v√† d·ªÖ hi·ªÉu!',
          'B√†i vi·∫øt gi·∫£i ƒë√°p ƒë∆∞·ª£c nhi·ªÅu th·∫Øc m·∫Øc c·ªßa m√¨nh!'
        ]
      },
      {
        names: ['L√™ Minh F', 'Nguy·ªÖn Th·∫£o G', 'Tr·∫ßn H√πng H', 'V≈© Linh I', 'ƒê·ªó Nam J'],
        contents: [
          'C√≥ th·ªÉ chia s·∫ª th√™m v·ªÅ v·∫•n ƒë·ªÅ n√†y kh√¥ng? M√¨nh mu·ªën t√¨m hi·ªÉu s√¢u h∆°n.',
          'B·∫°n c√≥ th·ªÉ gi·∫£i th√≠ch r√µ h∆°n ph·∫ßn n√†y ƒë∆∞·ª£c kh√¥ng?',
          'M√¨nh c√≥ m·ªôt s·ªë c√¢u h·ªèi v·ªÅ n·ªôi dung n√†y, c√≥ th·ªÉ trao ƒë·ªïi kh√¥ng?',
          'R·∫•t mong ƒë∆∞·ª£c nghe th√™m √Ω ki·∫øn c·ªßa b·∫°n v·ªÅ ch·ªß ƒë·ªÅ n√†y!',
          'C√≥ t√†i li·ªáu n√†o tham kh·∫£o th√™m kh√¥ng b·∫°n?'
        ]
      },
      {
        names: ['Ph·∫°m Th·ªã K', 'L√Ω VƒÉn L', 'Cao Th·ªã M', 'B√πi Minh N', 'ƒê·∫∑ng Hoa O'],
        contents: [
          'Th√¥ng tin r·∫•t ch√≠nh x√°c v√† c·∫≠p nh·∫≠t. ƒê√£ save ƒë·ªÉ ƒë·ªçc l·∫°i sau! üìö',
          'N·ªôi dung r·∫•t th·ª±c t·∫ø v√† √°p d·ª•ng ƒë∆∞·ª£c ngay! üí™',
          'C·∫£m ∆°n b·∫°n, m√¨nh s·∫Ω √°p d·ª•ng nh·ªØng g√¨ h·ªçc ƒë∆∞·ª£c!',
          'B√†i vi·∫øt gi√∫p m√¨nh hi·ªÉu r√µ h∆°n v·ªÅ v·∫•n ƒë·ªÅ n√†y! ‚ú®',
          'R·∫•t b·ªï √≠ch! ƒê√£ share cho b·∫°n b√® r·ªìi! üî•'
        ]
      }
    ];

    // Use postId to generate consistent but unique comments
    const postHash = postId ? postId.split('').reduce((a, b) => {
      a = ((a << 5) - a) + b.charCodeAt(0);
      return a & a;
    }, 0) : 0;

    const numComments = Math.abs(postHash % 3) + 1; // 1-3 comments per post
    const comments = [];

    for (let i = 0; i < numComments; i++) {
      const templateIndex = Math.abs((postHash + i) % commentTemplates.length);
      const template = commentTemplates[templateIndex];
      const nameIndex = Math.abs((postHash + i * 2) % template.names.length);
      const contentIndex = Math.abs((postHash + i * 3) % template.contents.length);

      const comment = {
        id: `${postId}_comment_${i}`,
        author: {
          name: template.names[nameIndex],
          avatar: `https://ui-avatars.com/api/?name=${encodeURIComponent(template.names[nameIndex])}&background=${['3b82f6', 'ef4444', '10b981', 'f59e0b', '8b5cf6'][nameIndex % 5]}&color=fff`,
          verified: i === 0 && Math.abs(postHash) % 3 === 0 // Some verified users
        },
        content: template.contents[contentIndex],
        timestamp: new Date(Date.now() - (i + 1) * 30 * 60 * 1000), // 30 min intervals
        likes: Math.abs((postHash + i * 4) % 15) + 1, // 1-15 likes
        liked: Math.abs((postHash + i * 5) % 4) === 0, // 25% chance liked
        replies: i === 0 && numComments > 1 ? [
          {
            id: `${postId}_reply_${i}`,
            author: {
              name: template.names[(nameIndex + 1) % template.names.length],
              avatar: `https://ui-avatars.com/api/?name=${encodeURIComponent(template.names[(nameIndex + 1) % template.names.length])}&background=6366f1&color=fff`
            },
            content: 'M√¨nh c≈©ng nghƒ© v·∫≠y! R·∫•t h·ªØu √≠ch üëç',
            timestamp: new Date(Date.now() - i * 25 * 60 * 1000),
            likes: Math.abs((postHash + i * 6) % 8) + 1,
            liked: Math.abs((postHash + i * 7) % 3) === 0
          }
        ] : []
      };

      comments.push(comment);
    }

    return comments;
  };

  useEffect(() => {
    // Load demo comments based on post ID
    const demoComments = generateDemoComments(id);
    setComments(demoComments);
  }, [id]);

  const formatTimeAgo = (date) => {
    const now = new Date();
    const diffInSeconds = Math.floor((now - date) / 1000);

    if (diffInSeconds < 60) return 'v·ª´a xong';
    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} ph√∫t tr∆∞·ªõc`;
    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} gi·ªù tr∆∞·ªõc`;
    return `${Math.floor(diffInSeconds / 86400)} ng√†y tr∆∞·ªõc`;
  };

  const handleLikeComment = (commentId, isReply = false, parentId = null) => {
    setComments(prev => prev.map(comment => {
      if (isReply && comment.id === parentId) {
        return {
          ...comment,
          replies: comment.replies.map(reply =>
            reply.id === commentId
              ? {
                  ...reply,
                  liked: !reply.liked,
                  likes: reply.liked ? reply.likes - 1 : reply.likes + 1
                }
              : reply
          )
        };
      } else if (comment.id === commentId) {
        return {
          ...comment,
          liked: !comment.liked,
          likes: comment.liked ? comment.likes - 1 : comment.likes + 1
        };
      }
      return comment;
    }));
  };

  const handleSubmitComment = (e) => {
    e.preventDefault();
    if (!newComment.trim()) return;

    const comment = {
      id: `new_${Date.now()}`,
      author: {
        name: 'B·∫°n',
        avatar: 'https://ui-avatars.com/api/?name=You&background=6366f1&color=fff'
      },
      content: newComment,
      timestamp: new Date(),
      likes: 0,
      liked: false,
      replies: []
    };

    setComments(prev => [comment, ...prev]);
    setNewComment('');
  };

  const CommentItem = ({ comment, isReply = false, parentId = null }) => (
    <motion.div
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      className={`flex space-x-3 ${isReply ? 'ml-12 mt-3' : 'mb-4'}`}
    >
      <img
        src={comment.author.avatar}
        alt={comment.author.name}
        className="w-8 h-8 rounded-full flex-shrink-0"
      />
      <div className="flex-1 min-w-0">
        <div className={`${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'} rounded-2xl px-3 py-2`}>
          <div className="flex items-center space-x-2 mb-1">
            <span className={`font-semibold text-sm ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
              {comment.author.name}
            </span>
            {comment.author.verified && (
              <span className="text-blue-500 text-xs">‚úì</span>
            )}
          </div>
          <p className={`text-sm ${isDarkMode ? 'text-gray-200' : 'text-gray-800'}`}>
            {comment.content}
          </p>
        </div>

        <div className="flex items-center space-x-4 mt-1 ml-3">
          <button
            onClick={() => handleLikeComment(comment.id, isReply, parentId)}
            className={`flex items-center space-x-1 text-xs font-medium transition-colors ${
              comment.liked
                ? 'text-red-500'
                : isDarkMode ? 'text-gray-400 hover:text-red-400' : 'text-gray-500 hover:text-red-500'
            }`}
          >
            <Heart size={12} className={comment.liked ? 'fill-current' : ''} />
            <span>{comment.likes > 0 ? comment.likes : 'Th√≠ch'}</span>
          </button>

          {!isReply && (
            <button className={`text-xs font-medium ${isDarkMode ? 'text-gray-400 hover:text-white' : 'text-gray-500 hover:text-gray-900'} transition-colors`}>
              Ph·∫£n h·ªìi
            </button>
          )}

          <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-400'}`}>
            {formatTimeAgo(comment.timestamp)}
          </span>

          <button className={`p-1 rounded-full ${isDarkMode ? 'hover:bg-gray-600' : 'hover:bg-gray-200'} transition-colors`}>
            <MoreHorizontal size={12} className={isDarkMode ? 'text-gray-400' : 'text-gray-500'} />
          </button>
        </div>

        {/* Replies */}
        {comment.replies && comment.replies.length > 0 && (
          <div className="mt-2">
            {comment.replies.map(reply => (
              <CommentItem
                key={reply.id}
                comment={reply}
                isReply={true}
                parentId={comment.id}
              />
            ))}
          </div>
        )}
      </div>
    </motion.div>
  );

  return (
    <div className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} border-t`}>
      <div className="p-4">
        {/* Comment Input */}
        <form onSubmit={handleSubmitComment} className="mb-6">
          <div className="flex space-x-3">
            <img
              src="https://ui-avatars.com/api/?name=You&background=6366f1&color=fff"
              alt="Your avatar"
              className="w-8 h-8 rounded-full flex-shrink-0"
            />
            <div className="flex-1">
              <div className={`${isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-gray-100 border-gray-200'} border rounded-full flex items-center px-4 py-2`}>
                <input
                  type="text"
                  value={newComment}
                  onChange={(e) => setNewComment(e.target.value)}
                  placeholder="Vi·∫øt b√¨nh lu·∫≠n..."
                  className={`flex-1 bg-transparent ${isDarkMode ? 'text-white placeholder-gray-400' : 'text-gray-900 placeholder-gray-500'} text-sm focus:outline-none`}
                />
                <button
                  type="submit"
                  disabled={!newComment.trim() || loading}
                  className={`ml-2 p-1 rounded-full transition-colors ${
                    newComment.trim()
                      ? 'text-blue-500 hover:bg-blue-100 dark:hover:bg-blue-900/30'
                      : 'text-gray-400 cursor-not-allowed'
                  }`}
                >
                  <Send size={16} />
                </button>
              </div>
            </div>
          </div>
        </form>

        {/* Comments List */}
        <div className="space-y-1">
          <div className="flex items-center justify-between mb-4">
            <h3 className={`font-semibold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
              B√¨nh lu·∫≠n ({comments.length + initialCommentCount})
            </h3>
            {onClose && (
              <button
                onClick={onClose}
                className={`text-sm font-medium ${isDarkMode ? 'text-blue-400 hover:text-blue-300' : 'text-blue-600 hover:text-blue-700'} transition-colors`}
              >
                ·∫®n b√¨nh lu·∫≠n
              </button>
            )}
          </div>

          <AnimatePresence>
            {comments.map(comment => (
              <CommentItem key={comment.id} comment={comment} />
            ))}
          </AnimatePresence>

          {comments.length === 0 && (
            <div className="text-center py-8">
              <div className="text-4xl mb-2">üí¨</div>
              <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                Ch∆∞a c√≥ b√¨nh lu·∫≠n n√†o. H√£y l√† ng∆∞·ªùi ƒë·∫ßu ti√™n b√¨nh lu·∫≠n!
              </p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default CommentsSection;
