import React from 'react';
import { MessageCircle, Heart } from 'lucide-react';
import { useTheme } from '../../context/ThemeContext';

const CommentPreview = ({ linkId, onToggleFullComments }) => {
  const { isDarkMode } = useTheme();

  // Generate preview comments based on linkId for uniqueness
  const generatePreviewComments = (postId) => {
    const commentTemplates = [
      {
        names: ['Nguy·ªÖn VƒÉn A', 'Tr·∫ßn Minh B', 'L√™ Th·ªã C'],
        contents: [
          'B√†i vi·∫øt r·∫•t hay v√† b·ªï √≠ch! C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª üëç',
          'Th√¥ng tin r·∫•t h·ªØu √≠ch, m√¨nh ƒë√£ h·ªçc ƒë∆∞·ª£c nhi·ªÅu ƒëi·ªÅu m·ªõi!',
          'C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª ki·∫øn th·ª©c qu√Ω b√°u n√†y üôè'
        ]
      },
      {
        names: ['L√™ Minh D', 'Nguy·ªÖn Th·∫£o E', 'Tr·∫ßn H√πng F'],
        contents: [
          'C√≥ th·ªÉ chia s·∫ª th√™m v·ªÅ v·∫•n ƒë·ªÅ n√†y kh√¥ng? M√¨nh mu·ªën t√¨m hi·ªÉu s√¢u h∆°n.',
          'B·∫°n c√≥ th·ªÉ gi·∫£i th√≠ch r√µ h∆°n ph·∫ßn n√†y ƒë∆∞·ª£c kh√¥ng?',
          'M√¨nh c√≥ m·ªôt s·ªë c√¢u h·ªèi v·ªÅ n·ªôi dung n√†y, c√≥ th·ªÉ trao ƒë·ªïi kh√¥ng?'
        ]
      }
    ];

    // Use postId to generate consistent but unique comments
    const postHash = postId ? postId.split('').reduce((a, b) => {
      a = ((a << 5) - a) + b.charCodeAt(0);
      return a & a;
    }, 0) : 0;

    const comments = [];
    for (let i = 0; i < 2; i++) { // Always show 2 preview comments
      const templateIndex = Math.abs((postHash + i) % commentTemplates.length);
      const template = commentTemplates[templateIndex];
      const nameIndex = Math.abs((postHash + i * 2) % template.names.length);
      const contentIndex = Math.abs((postHash + i * 3) % template.contents.length);

      comments.push({
        id: `${postId}_preview_${i}`,
        author: template.names[nameIndex],
        content: template.contents[contentIndex],
        likes: Math.abs((postHash + i * 4) % 15) + 1
      });
    }

    return comments;
  };

  const previewComments = generatePreviewComments(linkId);

  return (
    <div className={`border-t border-gray-200 dark:border-gray-700 ${isDarkMode ? 'bg-gray-800' : 'bg-gray-50'}`}>
      {/* Preview Comments */}
      <div className="px-4 py-3 space-y-2">
        {previewComments.map((comment, index) => (
          <div key={comment.id} className="flex items-start space-x-2">
            <img
              src={`https://ui-avatars.com/api/?name=${encodeURIComponent(comment.author)}&background=${index === 0 ? '3b82f6' : '10b981'}&color=fff`}
              alt={comment.author}
              className="w-6 h-6 rounded-full flex-shrink-0"
            />
            <div className="flex-1 min-w-0">
              <div className={`${isDarkMode ? 'bg-gray-700' : 'bg-gray-100'} rounded-lg px-3 py-2`}>
                <div className="flex items-center space-x-2 mb-1">
                  <span className={`font-medium text-xs ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                    {comment.author}
                  </span>
                </div>
                <p className={`text-xs ${isDarkMode ? 'text-gray-200' : 'text-gray-700'} line-clamp-2`}>
                  {comment.content}
                </p>
              </div>
              <div className="flex items-center space-x-3 mt-1 ml-3">
                <button className={`flex items-center space-x-1 text-xs ${isDarkMode ? 'text-gray-400 hover:text-red-400' : 'text-gray-500 hover:text-red-500'} transition-colors`}>
                  <Heart size={10} />
                  <span>{comment.likes}</span>
                </button>
                <span className={`text-xs ${isDarkMode ? 'text-gray-500' : 'text-gray-400'}`}>
                  2h
                </span>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* View All Comments Button */}
      <div className="px-4 pb-3">
        <button
          onClick={onToggleFullComments}
          className={`flex items-center space-x-2 text-sm font-medium ${isDarkMode ? 'text-blue-400 hover:text-blue-300' : 'text-blue-600 hover:text-blue-700'} transition-colors`}
        >
          <MessageCircle size={16} />
          <span>Xem t·∫•t c·∫£ b√¨nh lu·∫≠n</span>
        </button>
      </div>
    </div>
  );
};

export default CommentPreview;
