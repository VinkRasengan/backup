import { collection, addDoc, serverTimestamp } from 'firebase/firestore';
import { db } from '../config/firebase';

// Mock data for seeding Firestore
const mockPosts = [
  {
    title: 'C·∫£nh b√°o: Website l·ª´a ƒë·∫£o gi·∫£ m·∫°o ng√¢n h√†ng VCB',
    description: 'Ph√°t hi·ªán website c√≥ domain t∆∞∆°ng t·ª± ng√¢n h√†ng VCB ƒëang ho·∫°t ƒë·ªông l·ª´a ƒë·∫£o. M·ªçi ng∆∞·ªùi c·∫ßn c·∫©n th·∫≠n khi truy c·∫≠p c√°c trang web ng√¢n h√†ng.',
    url: 'https://vcb-fake-example.com',
    userId: 'mock-user-1',
    userEmail: 'nguyen.van.an@example.com',
    status: 'unsafe',
    finalScore: 25,
    credibilityScore: 20,
    securityScore: 30,
    metadata: {
      title: 'VCB Bank - ƒêƒÉng nh·∫≠p',
      domain: 'vcb-fake-example.com',
      description: 'Trang ƒëƒÉng nh·∫≠p ng√¢n h√†ng VCB'
    },
    tags: ['c·∫£nh b√°o', 'ng√¢n h√†ng', 'l·ª´a ƒë·∫£o'],
    category: 'security'
  },
  {
    title: 'Chia s·∫ª c√°ch nh·∫≠n bi·∫øt email phishing hi·ªáu qu·∫£',
    description: 'Sau khi b·ªã l·ª´a m·ªôt l·∫ßn, m√¨nh ƒë√£ h·ªçc ƒë∆∞·ª£c c√°ch nh·∫≠n bi·∫øt email l·ª´a ƒë·∫£o. Chia s·∫ª v·ªõi m·ªçi ng∆∞·ªùi m·ªôt s·ªë tip h·ªØu √≠ch ƒë·ªÉ tr√°nh b·ªã l·ª´a.',
    url: 'https://phishing-example.com',
    userId: 'mock-user-2',
    userEmail: 'tran.thi.binh@example.com',
    status: 'suspicious',
    finalScore: 45,
    credibilityScore: 40,
    securityScore: 50,
    metadata: {
      title: 'Khuy·∫øn m√£i ƒë·∫∑c bi·ªát - Nh·∫≠n ngay 1 tri·ªáu ƒë·ªìng',
      domain: 'phishing-example.com',
      description: 'Ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i h·∫•p d·∫´n'
    },
    tags: ['email', 'phishing', 'b·∫£o m·∫≠t'],
    category: 'education'
  },
  {
    title: 'Ph√¢n t√≠ch: Xu h∆∞·ªõng l·ª´a ƒë·∫£o m·ªõi qua m·∫°ng x√£ h·ªôi',
    description: 'B√°o c√°o chi ti·∫øt v·ªÅ c√°c ph∆∞∆°ng th·ª©c l·ª´a ƒë·∫£o m·ªõi xu·∫•t hi·ªán tr√™n Facebook v√† TikTok trong th√°ng v·ª´a qua. C·∫ßn c·∫£nh gi√°c v·ªõi c√°c chi√™u tr√≤ m·ªõi.',
    url: 'https://social-scam-analysis.com',
    userId: 'mock-user-3',
    userEmail: 'le.minh.cuong@example.com',
    status: 'safe',
    finalScore: 85,
    credibilityScore: 90,
    securityScore: 80,
    metadata: {
      title: 'B√°o c√°o xu h∆∞·ªõng l·ª´a ƒë·∫£o 2024',
      domain: 'social-scam-analysis.com',
      description: 'Ph√¢n t√≠ch chuy√™n s√¢u v·ªÅ l·ª´a ƒë·∫£o m·∫°ng x√£ h·ªôi'
    },
    tags: ['ph√¢n t√≠ch', 'm·∫°ng x√£ h·ªôi', 'xu h∆∞·ªõng'],
    category: 'analysis'
  },
  {
    title: 'Ki·ªÉm tra trang web b√°n h√†ng online ƒë√°ng ng·ªù',
    description: 'Trang web n√†y b√°n ƒëi·ªán tho·∫°i v·ªõi gi√° r·∫•t r·∫ª, nh∆∞ng c√≥ nhi·ªÅu d·∫•u hi·ªáu ƒë√°ng ng·ªù. M·ªçi ng∆∞·ªùi xem v√† g√≥p √Ω.',
    url: 'https://cheap-phones-scam.com',
    userId: 'mock-user-4',
    userEmail: 'pham.thi.dao@example.com',
    status: 'unsafe',
    finalScore: 15,
    credibilityScore: 10,
    securityScore: 20,
    metadata: {
      title: 'iPhone 15 Pro Max ch·ªâ 5 tri·ªáu - Khuy·∫øn m√£i s·ªëc',
      domain: 'cheap-phones-scam.com',
      description: 'C·ª≠a h√†ng ƒëi·ªán tho·∫°i gi√° r·∫ª nh·∫•t Vi·ªát Nam'
    },
    tags: ['mua s·∫Øm', 'ƒëi·ªán tho·∫°i', 'l·ª´a ƒë·∫£o'],
    category: 'ecommerce'
  },
  {
    title: 'Website tin t·ª©c ƒë√°ng tin c·∫≠y v·ªÅ c√¥ng ngh·ªá',
    description: 'Chia s·∫ª m·ªôt trang web tin t·ª©c c√¥ng ngh·ªá uy t√≠n, c·∫≠p nh·∫≠t th∆∞·ªùng xuy√™n v√† c√≥ th√¥ng tin ch√≠nh x√°c.',
    url: 'https://tech-news-reliable.com',
    userId: 'mock-user-5',
    userEmail: 'hoang.van.duc@example.com',
    status: 'safe',
    finalScore: 92,
    credibilityScore: 95,
    securityScore: 89,
    metadata: {
      title: 'TechNews - Tin t·ª©c c√¥ng ngh·ªá h√†ng ƒë·∫ßu',
      domain: 'tech-news-reliable.com',
      description: 'C·∫≠p nh·∫≠t tin t·ª©c c√¥ng ngh·ªá m·ªõi nh·∫•t'
    },
    tags: ['tin t·ª©c', 'c√¥ng ngh·ªá', 'ƒë√°ng tin'],
    category: 'news'
  }
];

const mockComments = [
  {
    content: 'C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª! M√¨nh su√Ωt b·ªã l·ª´a r·ªìi.',
    userId: 'mock-user-2',
    userEmail: 'tran.thi.binh@example.com'
  },
  {
    content: 'Th√¥ng tin r·∫•t h·ªØu √≠ch, m·ªçi ng∆∞·ªùi n√™n c·∫©n th·∫≠n.',
    userId: 'mock-user-3',
    userEmail: 'le.minh.cuong@example.com'
  },
  {
    content: 'ƒê√£ b√°o c√°o trang web n√†y cho c∆° quan ch·ª©c nƒÉng.',
    userId: 'mock-user-4',
    userEmail: 'pham.thi.dao@example.com'
  },
  {
    content: 'B√†i ph√¢n t√≠ch r·∫•t chi ti·∫øt v√† chuy√™n nghi·ªáp.',
    userId: 'mock-user-1',
    userEmail: 'nguyen.van.an@example.com'
  },
  {
    content: 'C·∫ßn th√™m nhi·ªÅu b√†i vi·∫øt nh∆∞ th·∫ø n√†y.',
    userId: 'mock-user-5',
    userEmail: 'hoang.van.duc@example.com'
  }
];

const voteTypes = ['safe', 'unsafe', 'suspicious'];

export const seedFirestore = async () => {
  try {
    console.log('üå± B·∫Øt ƒë·∫ßu seed data v√†o Firestore...');

    // Seed posts
    const postIds = [];
    for (const post of mockPosts) {
      const postData = {
        ...post,
        createdAt: serverTimestamp(),
        updatedAt: serverTimestamp(),
        voteCount: Math.floor(Math.random() * 50) + 1,
        commentCount: Math.floor(Math.random() * 10) + 1,
        views: Math.floor(Math.random() * 500) + 50
      };

      const docRef = await addDoc(collection(db, 'links'), postData);
      postIds.push(docRef.id);
      console.log(`‚úÖ ƒê√£ t·∫°o post: ${post.title}`);
    }

    // Seed comments
    for (let i = 0; i < mockComments.length; i++) {
      const comment = mockComments[i];
      const randomPostId = postIds[Math.floor(Math.random() * postIds.length)];
      
      const commentData = {
        ...comment,
        linkId: randomPostId,
        createdAt: serverTimestamp(),
        updatedAt: serverTimestamp()
      };

      await addDoc(collection(db, 'comments'), commentData);
      console.log(`‚úÖ ƒê√£ t·∫°o comment: ${comment.content.substring(0, 30)}...`);
    }

    // Seed votes
    for (const postId of postIds) {
      const numVotes = Math.floor(Math.random() * 20) + 5;
      
      for (let i = 0; i < numVotes; i++) {
        const voteData = {
          linkId: postId,
          userId: `mock-voter-${i}`,
          userEmail: `voter${i}@example.com`,
          voteType: voteTypes[Math.floor(Math.random() * voteTypes.length)],
          createdAt: serverTimestamp(),
          updatedAt: serverTimestamp()
        };

        await addDoc(collection(db, 'votes'), voteData);
      }
      console.log(`‚úÖ ƒê√£ t·∫°o ${numVotes} votes cho post ${postId}`);
    }

    console.log('üéâ Ho√†n th√†nh seed data!');
    console.log(`üìä ƒê√£ t·∫°o: ${mockPosts.length} posts, ${mockComments.length} comments, v√† nhi·ªÅu votes`);
    
    return {
      success: true,
      postsCreated: mockPosts.length,
      commentsCreated: mockComments.length,
      postIds
    };

  } catch (error) {
    console.error('‚ùå L·ªói khi seed data:', error);
    throw error;
  }
};

// Helper function to clear all data (use with caution!)
export const clearFirestoreData = async () => {
  console.log('‚ö†Ô∏è Ch·ª©c nƒÉng n√†y c·∫ßn ƒë∆∞·ª£c implement c·∫©n th·∫≠n ƒë·ªÉ tr√°nh x√≥a nh·∫ßm data th·∫≠t');
  // Implementation would require admin SDK or batch operations
};

// Test connection
export const testFirestoreConnection = async () => {
  try {
    const testDoc = {
      test: true,
      timestamp: serverTimestamp()
    };
    
    const docRef = await addDoc(collection(db, 'test'), testDoc);
    console.log('‚úÖ K·∫øt n·ªëi Firestore th√†nh c√¥ng, test doc ID:', docRef.id);
    return true;
  } catch (error) {
    console.error('‚ùå L·ªói k·∫øt n·ªëi Firestore:', error);
    return false;
  }
};
