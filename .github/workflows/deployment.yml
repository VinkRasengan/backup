name: Deployment Pipeline

on:
  push:
    branches:  main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18

jobs:
  # Build and test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: npm   - name: Install dependencies
      run: |
        npm ci
        cd client && npm ci
        for service in services/*/; do
          if [ -f$service/package.json" ]; then
            echo "Installing dependencies for $service"
            cd "$service"
            npm ci
            cd - > /dev/null
          fi
        done

    - name: Run tests
      run: |
        npm test
        cd client && npm test -- --coverage --watchAll=false
        for service in services/*/; do
          if [ -f$service/package.json" ]; then
            echo Running tests for $service"
            cd "$service"
            npm test || echoNo testsfound            cd - > /dev/null
          fi
        done

    - name: Build frontend
      run: |
        cd client
        npm run build

  # Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${[object Object]env.NODE_VERSION }}

    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate || echo "Vulnerabilities found"
        cd client && npm audit --audit-level=moderate || echo "Client vulnerabilities found"

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    needs: [build-and-test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${[object Object]env.NODE_VERSION }}

    - name: Deploy to staging
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
      run: |
        echo "Deploying to staging environment..."
        # Add staging deployment logic here

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    needs: [build-and-test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == refs/heads/main
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${[object Object]env.NODE_VERSION }}

    - name: Deploy to production
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
        FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        VIRUSTOTAL_API_KEY: ${{ secrets.VIRUSTOTAL_API_KEY }}
        NEWSAPI_API_KEY: ${{ secrets.NEWSAPI_API_KEY }}
      run: |
        echo "Deploying to production..."
        node scripts/deploy-render-production.js

  # Health check
  health-check:
    name: Health Check
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${[object Object]env.NODE_VERSION }}

    - name: Run health check
      run: |
        echo "Running health checks..."
        node scripts/health-check-production.js || echo "Health check failed" 