name: Microservices CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'services/**'
      - 'client/**'
      - 'docker-compose.yml'
      - '.github/workflows/microservices-ci.yml'
      - 'package.json'
      - 'package-lock.json'
  pull_request:
    branches: [ main ]
    paths:
      - 'services/**'
      - 'client/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'
  NPM_CONFIG_TIMEOUT: 300000
  NPM_CONFIG_LEGACY_PEER_DEPS: true

jobs:
  # Detect changed services
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      api-gateway: ${{ steps.changes.outputs.api-gateway }}
      auth-service: ${{ steps.changes.outputs.auth-service }}
      link-service: ${{ steps.changes.outputs.link-service }}
      community-service: ${{ steps.changes.outputs.community-service }}
      chat-service: ${{ steps.changes.outputs.chat-service }}
      news-service: ${{ steps.changes.outputs.news-service }}
      admin-service: ${{ steps.changes.outputs.admin-service }}
      phishtank-service: ${{ steps.changes.outputs.phishtank-service }}
      criminalip-service: ${{ steps.changes.outputs.criminalip-service }}
      frontend: ${{ steps.changes.outputs.frontend }}
      any-service: ${{ steps.changes.outputs.api-gateway == 'true' || steps.changes.outputs.auth-service == 'true' || steps.changes.outputs.link-service == 'true' || steps.changes.outputs.community-service == 'true' || steps.changes.outputs.chat-service == 'true' || steps.changes.outputs.news-service == 'true' || steps.changes.outputs.admin-service == 'true' || steps.changes.outputs.phishtank-service == 'true' || steps.changes.outputs.criminalip-service == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            api-gateway:
              - 'services/api-gateway/**'
            auth-service:
              - 'services/auth-service/**'
            link-service:
              - 'services/link-service/**'
            community-service:
              - 'services/community-service/**'
            chat-service:
              - 'services/chat-service/**'
            news-service:
              - 'services/news-service/**'
            admin-service:
              - 'services/admin-service/**'
            phishtank-service:
              - 'services/phishtank-service/**'
            criminalip-service:
              - 'services/criminalip-service/**'
            frontend:
              - 'client/**'

  # Validate and fix CI/CD issues
  validate-cicd:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install root dependencies
        run: |
          npm config set legacy-peer-deps true
          npm ci --silent
        timeout-minutes: 10

      - name: Check required scripts
        run: |
          echo "üîç Checking required scripts..."
          required_scripts=(
            "scripts/ci-cd-validator.js"
            "scripts/ci-cd-auto-fix.js"
            "scripts/deploy-render-production.js"
          )
          
          for script in "${required_scripts[@]}"; do
            if [ ! -f "$script" ]; then
              echo "‚ùå Missing required script: $script"
              exit 1
            else
              echo "‚úÖ Found: $script"
            fi
          done

      - name: Run CI/CD validation
        run: |
          npm run validate:cicd || echo "Validation completed with warnings"
        continue-on-error: true

      - name: Auto-fix CI/CD issues
        run: |
          npm run fix:cicd || echo "Auto-fix completed"
        continue-on-error: true

      - name: Basic validation fallback
        run: |
          echo "üîç Running basic validation..."
          
          # Check if all required directories exist
          for dir in client services scripts; do
            if [ ! -d "$dir" ]; then
              echo "‚ùå Missing directory: $dir"
              exit 1
            fi
          done
          
          # Check if package.json files exist
          for pkg in package.json client/package.json; do
            if [ ! -f "$pkg" ]; then
              echo "‚ùå Missing package.json: $pkg"
              exit 1
            fi
          done
          
          echo "‚úÖ Basic validation passed"

  # Debug job to understand why jobs are skipped
  debug-changes:
    needs: [detect-changes]
    runs-on: ubuntu-latest
    steps:
      - name: Debug outputs
        run: |
          echo "üîç Debugging detect-changes outputs:"
          echo "api-gateway: ${{ needs.detect-changes.outputs.api-gateway }}"
          echo "auth-service: ${{ needs.detect-changes.outputs.auth-service }}"
          echo "link-service: ${{ needs.detect-changes.outputs.link-service }}"
          echo "community-service: ${{ needs.detect-changes.outputs.community-service }}"
          echo "chat-service: ${{ needs.detect-changes.outputs.chat-service }}"
          echo "news-service: ${{ needs.detect-changes.outputs.news-service }}"
          echo "admin-service: ${{ needs.detect-changes.outputs.admin-service }}"
          echo "phishtank-service: ${{ needs.detect-changes.outputs.phishtank-service }}"
          echo "criminalip-service: ${{ needs.detect-changes.outputs.criminalip-service }}"
          echo "frontend: ${{ needs.detect-changes.outputs.frontend }}"
          echo "any-service: ${{ needs.detect-changes.outputs.any-service }}"
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Changed files:"
          git diff --name-only ${{ github.event.before }} ${{ github.sha }} || echo "No changes detected"

  # Test and build services
  test-and-build:
    needs: [detect-changes, validate-cicd]
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.any-service == 'true'
    strategy:
      fail-fast: false
      matrix:
        service: [api-gateway, auth-service, link-service, community-service, chat-service, news-service, admin-service, phishtank-service, criminalip-service]
    steps:
      - name: Checkout code
        if: needs.detect-changes.outputs[matrix.service] == 'true'
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: needs.detect-changes.outputs[matrix.service] == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: services/${{ matrix.service }}/package-lock.json

      - name: Check if service exists
        if: needs.detect-changes.outputs[matrix.service] == 'true'
        id: check-service
        run: |
          if [ -d "services/${{ matrix.service }}" ] && [ -f "services/${{ matrix.service }}/package.json" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Service ${{ matrix.service }} directory or package.json not found"
          fi

      - name: Install dependencies
        if: needs.detect-changes.outputs[matrix.service] == 'true' && steps.check-service.outputs.exists == 'true'
        run: |
          cd services/${{ matrix.service }}
          npm config set legacy-peer-deps true
          npm config set audit-level moderate
          npm ci --silent --prefer-offline
        timeout-minutes: 15

      - name: Run security audit
        if: needs.detect-changes.outputs[matrix.service] == 'true' && steps.check-service.outputs.exists == 'true'
        run: |
          cd services/${{ matrix.service }}
          npm audit --audit-level=high || echo "‚ö†Ô∏è Security vulnerabilities found in ${{ matrix.service }}"
        continue-on-error: true

      - name: Check for tests
        if: needs.detect-changes.outputs[matrix.service] == 'true' && steps.check-service.outputs.exists == 'true'
        run: |
          cd services/${{ matrix.service }}
          if [ ! -d "src/__tests__" ] && [ ! -d "tests" ] && [ ! -d "__tests__" ]; then
            echo "‚ùå No tests found for ${{ matrix.service }}"
            echo "Please add tests to ensure code quality"
            exit 1
          else
            echo "‚úÖ Tests found for ${{ matrix.service }}"
          fi

      - name: Run linting
        if: needs.detect-changes.outputs[matrix.service] == 'true' && steps.check-service.outputs.exists == 'true'
        run: |
          cd services/${{ matrix.service }}
          if npm run lint --if-present; then
            echo "‚úÖ Linting passed for ${{ matrix.service }}"
          else
            echo "‚ùå Linting failed for ${{ matrix.service }}"
            exit 1
          fi

      - name: Run tests
        if: needs.detect-changes.outputs[matrix.service] == 'true' && steps.check-service.outputs.exists == 'true'
        run: |
          cd services/${{ matrix.service }}
          if npm test -- --passWithNoTests --forceExit --detectOpenHandles --maxWorkers=2; then
            echo "‚úÖ Tests passed for ${{ matrix.service }}"
          else
            echo "‚ùå Tests failed for ${{ matrix.service }}"
            exit 1
          fi
        timeout-minutes: 10

      - name: Build service
        if: needs.detect-changes.outputs[matrix.service] == 'true' && steps.check-service.outputs.exists == 'true'
        run: |
          cd services/${{ matrix.service }}
          if npm run build --if-present; then
            echo "‚úÖ Build successful for ${{ matrix.service }}"
          else
            echo "‚ÑπÔ∏è No build script found for ${{ matrix.service }}"
          fi
        continue-on-error: true

  # Test and build frontend
  test-frontend:
    needs: [detect-changes, validate-cicd]
    if: needs.detect-changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install dependencies
        run: |
          cd client
          npm config set legacy-peer-deps true
          npm ci --silent --prefer-offline
        timeout-minutes: 15

      - name: Create test environment
        run: |
          cd client
          # Remove conflicting setupFilesAfterEnv from package.json if exists
          if [ -f "package.json" ]; then
            node -e "
              const pkg = require('./package.json');
              if (pkg.jest && pkg.jest.setupFilesAfterEnv) {
                delete pkg.jest.setupFilesAfterEnv;
                require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));
                console.log('Removed setupFilesAfterEnv from package.json');
              }
            "
          fi

      - name: Check for frontend tests
        run: |
          cd client
          if [ ! -d "src/__tests__" ] && [ ! -d "tests" ] && [ ! -d "__tests__" ]; then
            echo "‚ùå No tests found for frontend"
            echo "Please add tests to ensure code quality"
            exit 1
          else
            echo "‚úÖ Tests found for frontend"
          fi

      - name: Run lint
        run: |
          cd client
          if npm run lint --if-present; then
            echo "‚úÖ Frontend linting passed"
          else
            echo "‚ùå Frontend linting failed"
            exit 1
          fi

      - name: Run tests
        run: |
          cd client
          CI=true npm test -- --coverage --watchAll=false --passWithNoTests --maxWorkers=2
        timeout-minutes: 15

      - name: Build frontend
        run: |
          cd client
          npm run build
        timeout-minutes: 10

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-coverage
          path: client/coverage/

  # Build and push Docker images
  build-images:
    needs: [detect-changes, test-and-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.detect-changes.outputs.any-service == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: [api-gateway, auth-service, link-service, community-service, chat-service, news-service, admin-service, phishtank-service, criminalip-service]
    steps:
      - name: Checkout code
        if: needs.detect-changes.outputs[matrix.service] == 'true'
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        if: needs.detect-changes.outputs[matrix.service] == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: needs.detect-changes.outputs[matrix.service] == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        if: needs.detect-changes.outputs[matrix.service] == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        if: needs.detect-changes.outputs[matrix.service] == 'true'
        uses: docker/build-push-action@v5
        with:
          context: services/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Scan for vulnerabilities
        if: needs.detect-changes.outputs[matrix.service] == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        if: needs.detect-changes.outputs[matrix.service] == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and push frontend image
  build-frontend-image:
    needs: [detect-changes, test-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.detect-changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: client
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Scan for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Integration tests
  integration-tests:
    needs: [test-and-build, test-frontend]
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm config set legacy-peer-deps true
          npm ci --silent
        timeout-minutes: 10

      - name: Create test environment
        run: |
          cp .env.example .env 2>/dev/null || echo "No .env.example found, creating basic .env"
          echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID || 'test-project' }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET || 'test-secret-for-integration-tests-very-long-key' }}" >> .env
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY || 'test-key' }}" >> .env
          echo "REDIS_HOST=localhost" >> .env
          echo "REDIS_PORT=6379" >> .env

      - name: Start services with Docker Compose
        run: |
          docker-compose up -d --build
        timeout-minutes: 10

      - name: Wait for Redis to be ready
        run: |
          echo "Waiting for Redis to be ready..."
          timeout 60 bash -c 'until nc -z localhost 6379; do sleep 1; done' || exit 1
          echo "‚úÖ Redis is ready"

      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to be ready..."
          for i in {1..30}; do
            if curl -f http://localhost:8080/health > /dev/null 2>&1; then
              echo "‚úÖ API Gateway is ready"
              break
            fi
            echo "‚è≥ Waiting for API Gateway... ($i/30)"
            sleep 10
          done

      - name: Run integration tests
        run: |
          if [ -f "scripts/run-integration-tests.js" ]; then
            node scripts/run-integration-tests.js
          else
            echo "‚ö†Ô∏è Integration test script not found, skipping"
          fi
        continue-on-error: true
        timeout-minutes: 15

      - name: Collect service logs
        if: always()
        run: |
          echo "=== API Gateway Logs ==="
          docker-compose logs api-gateway || true
          echo "=== Auth Service Logs ==="
          docker-compose logs auth-service || true

      - name: Stop services
        if: always()
        run: |
          docker-compose down -v

  # Deploy to staging
  deploy-staging:
    needs: [build-images, build-frontend-image]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm config set legacy-peer-deps true
          npm ci --silent
        timeout-minutes: 10

      - name: Deploy to Staging
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
          FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          VIRUSTOTAL_API_KEY: ${{ secrets.VIRUSTOTAL_API_KEY }}
          NEWSAPI_API_KEY: ${{ secrets.NEWSAPI_API_KEY }}
        run: |
          echo "üöÄ Starting Staging deployment..."
          if [ -f "scripts/deploy-docker.sh" ]; then
            chmod +x scripts/deploy-docker.sh
            bash scripts/deploy-docker.sh
          else
            echo "‚ö†Ô∏è Deployment script not found"
          fi

  # Deploy to Render Production
  deploy-render-production:
    needs: [build-images, build-frontend-image]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm config set legacy-peer-deps true
          npm ci --silent
        timeout-minutes: 10

      - name: Run Render deployment fixes
        run: |
          echo "üîß Applying Render deployment fixes..."
          if [ -f "scripts/fix-render-deployment-issues.js" ]; then
            node scripts/fix-render-deployment-issues.js
          else
            echo "‚ö†Ô∏è Render fix script not found"
          fi

      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
          FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          VIRUSTOTAL_API_KEY: ${{ secrets.VIRUSTOTAL_API_KEY }}
          NEWSAPI_API_KEY: ${{ secrets.NEWSAPI_API_KEY }}
          CRIMINALIP_API_KEY: ${{ secrets.CRIMINALIP_API_KEY }}
          PHISHTANK_API_KEY: ${{ secrets.PHISHTANK_API_KEY }}
        run: |
          echo "üöÄ Starting Render deployment..."
          if [ -f "scripts/deploy-render-production.js" ]; then
            node scripts/deploy-render-production.js
          else
            echo "‚ö†Ô∏è Render deployment script not found"
          fi

  # Notification job
  notify-completion:
    needs: [deploy-staging, deploy-render-production]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify completion
        run: |
          if [ "${{ needs.deploy-staging.result }}" == "success" ] || [ "${{ needs.deploy-render-production.result }}" == "success" ]; then
            echo "‚úÖ Deployment completed successfully"
          else
            echo "‚ö†Ô∏è Some deployments may have failed"
          fi

      - name: Notify Slack
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "Deployment ${{ github.event_name }} completed: ${{ job.status }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Deployment Status*\n‚Ä¢ Event: ${{ github.event_name }}\n‚Ä¢ Status: ${{ job.status }}\n‚Ä¢ Branch: ${{ github.ref }}\n‚Ä¢ Commit: ${{ github.sha }}"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        continue-on-error: true