version: '3.8'

networks:
  antifraud-network:
    driver: bridge

volumes:
  redis-data:
  prometheus-data:
  grafana-data:

services:
  # Redis for Event Bus and Caching
  redis:
    image: redis:7-alpine
    container_name: antifraud-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-antifraud123}
    command: redis-server --requirepass ${REDIS_PASSWORD:-antifraud123}
    networks:
      - antifraud-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # API Gateway with Enhanced Features
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: antifraud-api-gateway
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - PORT=8080
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-antifraud123}
      - AUTH_SERVICE_URL=http://auth-service:3001
      - LINK_SERVICE_URL=http://link-service:3002
      - COMMUNITY_SERVICE_URL=http://community-service:3003
      - CHAT_SERVICE_URL=http://chat-service:3004
      - NEWS_SERVICE_URL=http://news-service:3005
      - ADMIN_SERVICE_URL=http://admin-service:3006
      - CIRCUIT_BREAKER_ENABLED=true
      - EVENT_BUS_ENABLED=true
      - SERVICE_AUTH_ENABLED=true
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
    depends_on:
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    networks:
      - antifraud-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Auth Service with Redundancy
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: antifraud-auth-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-antifraud123}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
      - EVENT_BUS_ENABLED=true
      - AUTH_REDUNDANCY_ENABLED=true
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - antifraud-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Auth Service Backup Instance
  auth-service-backup:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: antifraud-auth-service-backup
    ports:
      - "3011:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-antifraud123}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
      - EVENT_BUS_ENABLED=true
      - AUTH_REDUNDANCY_ENABLED=true
      - IS_BACKUP_INSTANCE=true
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - antifraud-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Link Service
  link-service:
    build:
      context: ./services/link-service
      dockerfile: Dockerfile
    container_name: antifraud-link-service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - AUTH_SERVICE_URL=http://auth-service:3001
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-antifraud123}
      - EVENT_BUS_ENABLED=true
      - IPQUALITYSCORE_API_KEY=${IPQUALITYSCORE_API_KEY}
    depends_on:
      auth-service:
        condition: service_healthy
    networks:
      - antifraud-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Community Service
  community-service:
    build:
      context: ./services/community-service
      dockerfile: Dockerfile
    container_name: antifraud-community-service
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - PORT=3003
      - AUTH_SERVICE_URL=http://auth-service:3001
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-antifraud123}
      - EVENT_BUS_ENABLED=true
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
    depends_on:
      auth-service:
        condition: service_healthy
    networks:
      - antifraud-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Chat Service
  chat-service:
    build:
      context: ./services/chat-service
      dockerfile: Dockerfile
    container_name: antifraud-chat-service
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - PORT=3004
      - AUTH_SERVICE_URL=http://auth-service:3001
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-antifraud123}
      - EVENT_BUS_ENABLED=true
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    depends_on:
      auth-service:
        condition: service_healthy
    networks:
      - antifraud-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # News Service
  news-service:
    build:
      context: ./services/news-service
      dockerfile: Dockerfile
    container_name: antifraud-news-service
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=production
      - PORT=3005
      - AUTH_SERVICE_URL=http://auth-service:3001
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-antifraud123}
      - EVENT_BUS_ENABLED=true
      - NEWS_API_KEY=${NEWS_API_KEY}
    depends_on:
      auth-service:
        condition: service_healthy
    networks:
      - antifraud-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Service
  admin-service:
    build:
      context: ./services/admin-service
      dockerfile: Dockerfile
    container_name: antifraud-admin-service
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=production
      - PORT=3006
      - AUTH_SERVICE_URL=http://auth-service:3001
      - LINK_SERVICE_URL=http://link-service:3002
      - COMMUNITY_SERVICE_URL=http://community-service:3003
      - NEWS_SERVICE_URL=http://news-service:3005
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-antifraud123}
      - EVENT_BUS_ENABLED=true
    depends_on:
      auth-service:
        condition: service_healthy
      link-service:
        condition: service_healthy
      community-service:
        condition: service_healthy
      news-service:
        condition: service_healthy
    networks:
      - antifraud-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Client
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: antifraud-client
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8080
      - REACT_APP_FIREBASE_API_KEY=${REACT_APP_FIREBASE_API_KEY}
      - REACT_APP_FIREBASE_AUTH_DOMAIN=${REACT_APP_FIREBASE_AUTH_DOMAIN}
      - REACT_APP_FIREBASE_PROJECT_ID=${REACT_APP_FIREBASE_PROJECT_ID}
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - antifraud-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: antifraud-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - antifraud-network

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: antifraud-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - antifraud-network
