{
	"info": {
		"_postman_id": "factcheck-advanced-tests",
		"name": "FactCheck Advanced Tests",
		"description": "Collection nâng cao với test scripts và validation cho FactCheck Microservices API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "87654321"
	},
	"item": [
		{
			"name": "🧪 Test Suites",
			"item": [
				{
					"name": "Authentication Test Suite",
					"item": [
						{
							"name": "Test User Registration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has user data\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('user');",
											"    pm.expect(jsonData.user).to.have.property('email');",
											"    pm.expect(jsonData.user.email).to.eql(pm.environment.get('test_email'));",
											"});",
											"",
											"if (pm.response.json().user && pm.response.json().user.uid) {",
											"    pm.environment.set('user_id', pm.response.json().user.uid);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"displayName\": \"Test User\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/register",
									"host": ["{{base_url}}"],
									"path": ["api", "auth", "register"]
								}
							}
						},
						{
							"name": "Test User Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has token\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('token');",
											"    pm.expect(jsonData.token).to.be.a('string');",
											"    pm.expect(jsonData.token.length).to.be.greaterThan(0);",
											"});",
											"",
											"pm.test(\"Response has user info\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('user');",
											"    pm.expect(jsonData.user).to.have.property('email');",
											"});",
											"",
											"// Auto-set auth token",
											"if (pm.response.json().token) {",
											"    pm.environment.set('auth_token', pm.response.json().token);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/login",
									"host": ["{{base_url}}"],
									"path": ["api", "auth", "login"]
								}
							}
						},
						{
							"name": "Test Token Validation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Token is valid\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('valid');",
											"    pm.expect(jsonData.valid).to.be.true;",
											"});",
											"",
											"pm.test(\"Response has user info\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('user');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"token\": \"{{auth_token}}\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/verify-token",
									"host": ["{{base_url}}"],
									"path": ["api", "auth", "verify-token"]
								}
							}
						}
					]
				},
				{
					"name": "Link Service Test Suite",
					"item": [
						{
							"name": "Test URL Verification",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has scan result\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('scanResult');",
											"    pm.expect(jsonData.scanResult).to.have.property('url');",
											"    pm.expect(jsonData.scanResult).to.have.property('isSafe');",
											"});",
											"",
											"pm.test(\"URL matches request\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.scanResult.url).to.eql('https://example.com');",
											"});",
											"",
											"// Save link ID for further tests",
											"if (pm.response.json().scanResult && pm.response.json().scanResult.id) {",
											"    pm.environment.set('link_id', pm.response.json().scanResult.id);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"url\": \"https://example.com\",\n  \"description\": \"Test URL verification for automated testing\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/links/verify",
									"host": ["{{base_url}}"],
									"path": ["api", "links", "verify"]
								}
							}
						},
						{
							"name": "Test Scan History",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has scans array\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('scans');",
											"    pm.expect(jsonData.scans).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Scans belong to current user\", function () {",
											"    const jsonData = pm.response.json();",
											"    if (jsonData.scans.length > 0) {",
											"        pm.expect(jsonData.scans[0]).to.have.property('userId');",
											"        pm.expect(jsonData.scans[0].userId).to.eql(pm.environment.get('user_id'));",
											"    }",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/links/history",
									"host": ["{{base_url}}"],
									"path": ["api", "links", "history"]
								}
							}
						}
					]
				},
				{
					"name": "Community Service Test Suite",
					"item": [
						{
							"name": "Test Create Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response has post data\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('post');",
											"    pm.expect(jsonData.post).to.have.property('title');",
											"    pm.expect(jsonData.post).to.have.property('content');",
											"    pm.expect(jsonData.post).to.have.property('author');",
											"});",
											"",
											"pm.test(\"Post title matches request\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.post.title).to.eql('Test Post for Automation');",
											"});",
											"",
											"// Save post ID for further tests",
											"if (pm.response.json().post && pm.response.json().post.id) {",
											"    pm.environment.set('post_id', pm.response.json().post.id);",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Test Post for Automation\",\n  \"content\": \"This is a test post created by automated testing\",\n  \"category\": \"test\",\n  \"tags\": [\"automation\", \"test\"]\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/community/posts",
									"host": ["{{base_url}}"],
									"path": ["api", "community", "posts"]
								}
							}
						},
						{
							"name": "Test Vote on Post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Vote was recorded\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('success');",
											"    pm.expect(jsonData.success).to.be.true;",
											"});",
											"",
											"pm.test(\"Response has vote stats\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('voteStats');",
											"    pm.expect(jsonData.voteStats).to.have.property('upvotes');",
											"    pm.expect(jsonData.voteStats).to.have.property('downvotes');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"voteType\": \"upvote\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/community/posts/{{post_id}}/vote",
									"host": ["{{base_url}}"],
									"path": ["api", "community", "posts", "{{post_id}}", "vote"]
								}
							}
						}
					]
				}
			]
		},
		{
			"name": "🔍 Performance Tests",
			"item": [
				{
					"name": "Load Test - Get Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/community/posts?limit=50",
							"host": ["{{base_url}}"],
							"path": ["api", "community", "posts"],
							"query": [
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					}
				},
				{
					"name": "Load Test - Health Checks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": ["{{base_url}}"],
							"path": ["health"]
						}
					}
				}
			]
		},
		{
			"name": "🚨 Error Handling Tests",
			"item": [
				{
					"name": "Test Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response has error message\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.include('token');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid_token_here"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/auth/profile",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "profile"]
						}
					}
				},
				{
					"name": "Test Invalid URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has validation error\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.include('URL');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"url\": \"invalid-url\",\n  \"description\": \"Test invalid URL\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/links/verify",
							"host": ["{{base_url}}"],
							"path": ["api", "links", "verify"]
						}
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log('Running test: ' + pm.info.requestName);",
					"",
					"// Set timestamp for tracking",
					"pm.environment.set('test_timestamp', new Date().toISOString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"console.log('Test completed: ' + pm.info.requestName);",
					"",
					"// Log response time",
					"console.log('Response time: ' + pm.response.responseTime + 'ms');"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8082",
			"type": "string"
		},
		{
			"key": "auth_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "post_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "link_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "test_email",
			"value": "test@example.com",
			"type": "string"
		},
		{
			"key": "test_password",
			"value": "password123",
			"type": "string"
		}
	]
} 