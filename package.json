{
  "name": "factcheck-platform",
  "version": "2.0.0",
  "description": "FactCheck Anti-Fraud Platform - Event-Driven Microservices Architecture with Advanced Tech Stack",
  "private": true,
  "type": "module",
  "scripts": {
    "// === CORE DEVELOPMENT ===": "",
    "start": "node scripts/start-fast-separate.js",
    "start:separate": "node scripts/start-fast-separate.js",
    "start:together": "node scripts/start-fast-together.js",
    "stop": "node scripts/stop-all.js",
    "stop:force": "node scripts/stop-windows-force.js",
    "restart": "npm run stop && npm run start",
    "status": "node scripts/project-status.js",
    "health": "node scripts/project-status.js",
    "logs": "node scripts/logs-all.js",
    "// === DOCKER FULLSTACK DEPLOYMENT ===": "",
    "docker:deploy": "node scripts/docker-deploy-fullstack.js",
    "bigdata:start": "node scripts/start-bigdata-stack.js",
    "bigdata:infrastructure": "node scripts/start-bigdata-infrastructure.js",
    "bigdata:stop": "docker-compose -f docker-compose.bigdata.yml down",
    "bigdata:logs": "docker-compose -f docker-compose.bigdata.yml logs -f",
    "docker:start": "node scripts/docker-start-simple.js",
    "docker:stop": "docker compose down",
    "docker:logs": "docker compose logs -f",
    "docker:restart": "npm run docker:stop && npm run docker:start",
    "docker:clean": "docker compose down -v --remove-orphans",
    "docker:health": "node scripts/docker-health-check.js",
    "docker:raw": "docker compose up --build -d",
    "// === LEGACY DEPLOYMENT METHODS ===": "",
    "deploy:local": "node scripts/deploy-local-all.js",
    "deploy:docker": "node scripts/deploy-docker-all.js",
    "deploy:k8s": "node scripts/antifraud.js k8s",
    "// === DEVELOPMENT MODES ===": "",
    "dev": "npm run start:together",
    "dev:separate": "npm run start:separate",
    "dev:together": "npm run start:together",
    "dev:docker": "npm run docker:start",
    "// === SERVICE MANAGEMENT ===": "",
    "start:auth": "cd services/auth-service && npm start",
    "start:link": "cd services/link-service && npm start",
    "start:community": "cd services/community-service && npm start",
    "start:chat": "cd services/chat-service && npm start",
    "start:news": "cd services/news-service && npm start",
    "start:admin": "cd services/admin-service && npm start",
    "start:spark": "cd services/spark-service && npm start",
    "start:etl": "cd services/etl-service && npm start",
    "start:analytics": "cd services/analytics-service && npm start",
    "start:gateway": "cd services/api-gateway && npm start",
    "start:client": "cd client && npm start",
    "// === DEMO & BIG DATA ===": "",
    "demo:all": "node scripts/run-all-demos.js",
    "demo:spark": "node scripts/demo-spark-apis.js",
    "demo:analytics": "node scripts/demo-analytics-apis.js",
    "demo:start": "cd presentation && npm start",
    "bigdata:test": "node scripts/test-bigdata-services.js",
    "bigdata:health": "node scripts/health-bigdata.js",
    "bigdata:demo": "node scripts/start-bigdata-demo.js",
    "// === CONFIGURATION MANAGEMENT (NEW) ===": "",
    "validate:env-refactor": "node scripts/validate-env-refactor.js",
    "cleanup:refactor": "node scripts/cleanup-refactor.js",
    "update:env-loaders": "node scripts/update-services-env-loader.js",
    "create:service-envs": "node scripts/create-service-env-files.js",
    "check:ports": "node scripts/check-port-conflicts.js",
    "check:port3000": "node scripts/check-port-3000.js",
    "fix:ports": "node scripts/fix-port-conflicts.js",
    "// === INFRASTRUCTURE MANAGEMENT ===": "",
    "infrastructure:start": "docker compose up -d redis rabbitmq kurrentdb",
    "infrastructure:stop": "docker compose stop redis rabbitmq kurrentdb",
    "infrastructure:status": "docker ps --filter name=factcheck-redis --filter name=factcheck-rabbitmq --filter name=factcheck-kurrentdb",
    "infrastructure:logs": "docker compose logs -f redis rabbitmq kurrentdb",
    "dev:auth": "cd services/auth-service && npm run dev",
    "dev:link": "cd services/link-service && npm run dev",
    "dev:community": "cd services/community-service && npm run dev",
    "dev:chat": "cd services/chat-service && npm run dev",
    "dev:news": "cd services/news-service && npm run dev",
    "dev:admin": "cd services/admin-service && npm run dev",
    "dev:gateway": "cd services/api-gateway && npm run dev",
    "// === SETUP & INSTALLATION ===": "",
    "setup": "npm install && npm run install:all && npm run env:setup",
    "setup:full": "npm install && npm run install:all",
    "setup:test": "node scripts/test-docker-setup.js",
    "setup:microservices": "node scripts/setup-microservices.js",
    "setup:validate": "node scripts/validate-new-dev-setup.js",
    "env:validate": "node scripts/validate-env-config.js",
    "env:test": "node scripts/test-env-loading.js",
    "env:copy": "node scripts/test-env-copy.js --copy",
    "env:check": "node scripts/test-env-copy.js",
    "test:new-dev": "node scripts/new-dev-ci-tests.js",
    "test:new-dev-flow": "node scripts/test-new-developer-flow.js",
    "test:docker-setup": "node scripts/validate-docker-setup.js",
    "test:docker-quick": "node scripts/quick-docker-test.js",
    "test:workflow": "node scripts/test-new-dev-workflow.js",
    "test:render": "node scripts/test-render-deployment.js",
    "test:event-sourcing": "node scripts/test-event-sourcing.js",
    "test:all": "npm run test:new-dev && npm run test:workflow && npm run test:render && npm run test:event-sourcing",
    "fix:jest": "node scripts/fix-jest-configs.js",
    "fix:dockerfiles": "node scripts/fix-dockerfiles-for-render.js",
    "fix:all-dockerfiles": "node scripts/fix-all-dockerfiles.js",
    "fix:docker-startup": "node scripts/fix-docker-startup-issues.js",
    "// === SONARQUBE QUALITY ANALYSIS ===": "",
    "sonar:start": "node scripts/setup-sonarqube.js",
    "sonar:stop": "node scripts/stop-sonarqube.js",
    "sonar:analyze": "node scripts/sonarqube-analysis.js",
    "sonar:status": "node scripts/sonarqube-status.js",
    "sonar:full": "npm run sonar:start && sleep 180 && npm run sonar:analyze",
    "// === CLEANUP & MAINTENANCE ===": "",
    "cleanup": "node scripts/cleanup-project.js",
    "cleanup:full": "npm run cleanup && npm run docker:clean",
    "cleanup:soft": "node scripts/cleanup-project.js --soft",
    "cleanup:hard": "node scripts/cleanup-project.js --hard",
    "status:check": "node scripts/project-status.js",
    "fix:docker-restarts": "node scripts/fix-docker-restart-issues.js",
    "fix:restart-quick": "node scripts/quick-fix-restart.js",
    "// === DOCUMENTATION ===": "",
    "docs:generate": "node scripts/generate-user-guide.js",
    "docs:convert": "node scripts/convert-usage-guide-to-docx.js",
    "docs:validate": "node scripts/validate-docx.js",
    "docs:simple": "node scripts/create-simple-docx.js",
    "docs:final": "node scripts/create-final-docx.js",
    "docs:web": "node scripts/create-web-app-docx.js",
    "fix:docker-final": "node scripts/final-docker-fix.js",
    "fix:docker-complete": "node scripts/complete-docker-fix.js",
    "rebuild:restart-services": "node scripts/rebuild-restart-services.js",
    "fix:render": "node scripts/fix-render-deployment-issues.js",
    "diagnose:docker-restarts": "node scripts/diagnose-docker-restarts.js",
    "onboard:new-dev": "node scripts/new-developer-onboarding.js",
    "env:switch": "node scripts/switch-env.js",
    "env:local": "node scripts/switch-env.js local",
    "env:docker": "node scripts/switch-env.js docker",
    "env:k8s": "node scripts/switch-env.js k8s",
    "install:all": "npm install --ignore-scripts && cd client && npm install && cd ../services/api-gateway && npm install && cd ../auth-service && npm install && cd ../link-service && npm install && cd ../community-service && npm install && cd ../chat-service && npm install && cd ../news-service && npm install && cd ../admin-service && npm install && cd ../etl-service && npm install && cd ../event-bus-service && npm install && cd ../spark-service && npm install && cd ../analytics-service && npm install && cd ../phishtank-service && npm install && cd ../criminalip-service && npm install",
    "install:event-sourcing": "npm install @eventstore/db-client uuid lodash winston",
    "install:services": "cd services/api-gateway && npm install && cd ../auth-service && npm install && cd ../link-service && npm install && cd ../community-service && npm install && cd ../chat-service && npm install && cd ../news-service && npm install && cd ../admin-service && npm install && cd ../etl-service && npm install && cd ../event-bus-service && npm install && cd ../spark-service && npm install && cd ../analytics-service && npm install && cd ../phishtank-service && npm install && cd ../criminalip-service && npm install",
    "// === SETUP COMMANDS ===": "",
    "setup:event-sourcing": "node scripts/setup-full-event-sourcing.js",
    "setup:quick": "node scripts/quick-setup-event-sourcing.js",
    "setup:infrastructure": "npm run infrastructure:start && npm run infrastructure:status",
    "setup:dependencies": "npm run install:all && npm run install:event-sourcing",
    "setup:verify": "npm run health:event-sourcing && npm run test:event-sourcing",
    "env:setup": "node scripts/env-setup.js",
    "generate:jwt": "node scripts/generate-jwt-secret.js",
    "// === TESTING ===": "",
    "test": "node scripts/antifraud.js test",
    "test:unit": "node scripts/antifraud.js test-unit",
    "test:integration": "node scripts/antifraud.js test-integration",
    "test:contract": "node scripts/antifraud.js test-contract",
    "// === SECURITY AUDIT ===": "",
    "security:audit": "node scripts/security-audit.js",
    "security:audit:critical": "node scripts/security-audit.js --critical",
    "security:audit:high": "node scripts/security-audit.js --high",
    "security:audit:low": "node scripts/security-audit.js --low",
    "security:audit:fix": "node scripts/security-audit.js --fix",
    "security:audit:fix:critical": "node scripts/security-audit.js --critical --fix",
    "security:scan": "npm audit --audit-level=moderate",
    "security:fix": "npm audit fix",
    "security:fix:force": "npm audit fix --force",
    "security:test": "node scripts/quick-security-test.js",
    "security:test:quick": "node scripts/quick-security-test.js",
    "security:demo": "node scripts/demo-security-audit.js",
    "security:demo:fix": "node scripts/demo-audit-fix-mechanism.js",
    "test:services": "concurrently \"npm run test:api-gateway\" \"npm run test:auth\" \"npm run test:admin\" \"npm run test:community\" \"npm run test:link\" \"npm run test:news\" \"npm run test:chat\" \"npm run test:phishtank\" \"npm run test:criminalip\"",
    "test:api-gateway": "cd services/api-gateway && npm test",
    "test:auth": "cd services/auth-service && npm test",
    "test:admin": "cd services/admin-service && npm test",
    "test:chat": "cd services/chat-service && npm test",
    "test:community": "cd services/community-service && npm test",
    "test:link": "cd services/link-service && npm test",
    "test:news": "cd services/news-service && npm test",
    "test:phishtank": "cd services/phishtank-service && npm test",
    "test:criminalip": "cd services/criminalip-service && npm test",
    "test:client": "cd client && npm test",
    "// === DEPLOYMENT ===": "",
    "deploy": "node scripts/antifraud.js docker",
    "deploy:render": "node scripts/deploy-render-production.js",
    "deploy:k8s:istio": "node scripts/antifraud.js k8s-istio",
    "deploy:k8s:consul": "node scripts/antifraud.js k8s-consul",
    "// === DOCKER ===": "",
    "docker": "node scripts/antifraud.js docker",
    "docker:up": "docker-compose up -d",
    "docker:down": "docker-compose down",
    "docker:infrastructure": "docker-compose up -d redis kurrentdb",
    "docker:services": "docker-compose up -d api-gateway auth-service community-service",
    "docker:full": "docker-compose up -d",
    "docker:event-sourcing": "npm run docker:infrastructure && timeout 10 && npm run docker:services",
    "// === KUBERNETES ===": "",
    "k8s:apply": "kubectl apply -f k8s/",
    "k8s:delete": "kubectl delete namespace antifraud",
    "k8s:status": "kubectl get pods -n antifraud",
    "k8s:logs": "kubectl logs -f deployment/api-gateway -n antifraud",
    "// === MONITORING ===": "",
    "monitoring:start": "docker-compose -f docker-compose.monitoring.yml up -d",
    "monitoring:stop": "docker-compose -f docker-compose.monitoring.yml down",
    "monitoring:restart": "npm run monitoring:stop && npm run monitoring:start",
    "monitoring:logs": "docker-compose -f docker-compose.monitoring.yml logs -f",
    "// === PRODUCTION ===": "",
    "validate:production": "node scripts/validate-production-deployment.js",
    "health:production": "node scripts/health-check-production.js",
    "dashboard:production": "node scripts/deployment-dashboard.js",
    "monitor:production": "node scripts/deployment-dashboard.js --monitor",
    "// === UTILITIES ===": "",
    "health-check": "node scripts/project-health-check.js",
    "validate:cicd": "node scripts/ci-cd-validator.js",
    "fix:cicd": "node scripts/ci-cd-auto-fix.js",
    "improve:cicd": "node scripts/improve-cicd-workflow.js",
    "setup:monitoring": "node scripts/enhanced-monitoring.js",
    "health:check": "./scripts/health-check.sh",
    "info": "echo Frontend: http://localhost:3000, API Gateway: http://localhost:8080",
    "open": "start http://localhost:3000 || open http://localhost:3000 || xdg-open http://localhost:3000",
    "help": "node scripts/antifraud.js help",
    "// === WORKFLOW LINTER ===": "",
    "workflow:check": "node scripts/check-workflow-status.js",
    "workflow:fix": "node scripts/fix-workflow-linter-errors.js",
    "workflow:validate": "node scripts/check-workflow-status.js && node scripts/fix-workflow-linter-errors.js",
    "workflow:debug": "node scripts/fix-cicd-skip-issues.js",
    "workflow:test": "node scripts/test-workflow-logic.js",
    "// === ESLINT MAINTAINABILITY ===": "",
    "lint:maintainability": "node scripts/eslint-maintainability.js",
    "lint:fix": "node scripts/fix-maintainability-issues.js",
    "lint:check": "npx eslint . --format stylish",
    "lint:fix:auto": "npx eslint . --fix",
    "lint:report": "npx eslint . --format json --output-file eslint-report.json",
    "lint:demo": "node scripts/demo-maintainability-improvement.js"
  },
  "dependencies": {
    "axios": "^1.10.0",
    "concurrently": "^8.2.2",
    "docx": "^9.5.1",
    "dotenv": "^16.6.1",
    "express": "^4.18.2",
    "jsonwebtoken": "^9.0.2",
    "node-fetch": "^3.3.2",
    "opossum": "^8.0.0",
    "prom-client": "^15.1.0",
    "redis": "^4.6.10"
  },
  "devDependencies": {
    "@eslint/js": "^9.32.0",
    "@pact-foundation/pact": "^12.1.0",
    "@pact-foundation/pact-node": "^10.18.0",
    "eslint": "^9.32.0",
    "eslint-plugin-import": "^2.32.0",
    "eslint-plugin-node": "^11.1.0",
    "jest": "^29.7.0",
    "supertest": "^6.3.3"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0"
  },
  "keywords": [
    "microservices",
    "event-driven-architecture",
    "anti-fraud",
    "security",
    "event-sourcing",
    "circuit-breaker",
    "saga-pattern",
    "service-mesh",
    "contract-testing"
  ],
  "author": "Anti-Fraud Platform Team",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/VinkRasengan/backup.git"
  },
  "config": {
    "techStack": {
      "circuitBreaker": true,
      "eventBus": true,
      "saga": true,
      "serviceAuth": true,
      "authRedundancy": true,
      "contractTesting": true,
      "integrationTesting": true,
      "serviceMesh": "optional"
    },
    "deployment": {
      "defaultMode": "local",
      "supportedModes": [
        "local",
        "docker",
        "k8s",
        "k8s-istio",
        "k8s-consul"
      ]
    }
  }
}
