import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
import fs from 'fs';
import path from 'path';
const { Document, Packer, Paragraph, TextRun, AlignmentType } = require('docx');

async function createWebAppDocx() {
    try {
        console.log('üîÑ Creating Web Application User Guide DOCX...');
        
        // Read the markdown file
        const markdownPath = path.join(__dirname, '..', 'docs', 'USAGE-GUIDE.md');
        const markdownContent = fs.readFileSync(markdownPath, 'utf8');
        
        // Create a web-focused document
        const doc = new Document({
            sections: [{
                properties: {},
                children: createWebAppContent(markdownContent)
            }]
        });
        
        // Generate DOCX file
        const buffer = await Packer.toBuffer(doc);
        
        // Write to file
        const outputPath = path.join(__dirname, '..', 'docs', 'User_Guide.docx');
        fs.writeFileSync(outputPath, buffer);
        
        console.log('‚úÖ Successfully created User_Guide.docx for Web Application');
        console.log(`üìÅ Output file: ${outputPath}`);
        console.log(`üìä File size: ${(buffer.length / 1024).toFixed(2)} KB`);
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Error creating DOCX:', error);
        return false;
    }
}

function createWebAppContent(markdown) {
    const children = [];
    
    // Add title
    children.push(new Paragraph({
        children: [
            new TextRun({
                text: 'FactCheck Anti-Fraud Platform',
                size: 36,
                bold: true
            })
        ],
        alignment: AlignmentType.CENTER,
        spacing: { before: 400, after: 200 }
    }));
    
    children.push(new Paragraph({
        children: [
            new TextRun({
                text: 'H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng Web Application',
                size: 28,
                bold: true
            })
        ],
        alignment: AlignmentType.CENTER,
        spacing: { before: 200, after: 300 }
    }));
    
    // Add subtitle
    children.push(new Paragraph({
        children: [
            new TextRun({
                text: 'T√†i li·ªáu h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng cu·ªëi (User) c√°ch truy c·∫≠p v√† s·ª≠ d·ª•ng h·ªá th·ªëng web',
                size: 18
            })
        ],
        alignment: AlignmentType.CENTER,
        spacing: { before: 200, after: 400 }
    }));
    
    // Add video section (Page 2)
    children.push(new Paragraph({
        children: [
            new TextRun({
                text: 'Video H∆∞·ªõng D·∫´n',
                size: 24,
                bold: true
            })
        ],
        spacing: { before: 300, after: 150 }
    }));
    
    children.push(new Paragraph({
        children: [
            new TextRun({
                text: 'Xem video h∆∞·ªõng d·∫´n chi ti·∫øt c√°ch s·ª≠ d·ª•ng h·ªá th·ªëng web:',
                size: 16
            })
        ],
        spacing: { before: 100, after: 50 }
    }));
    
    children.push(new Paragraph({
        children: [
            new TextRun({
                text: 'Link tr·ª±c ti·∫øp: https://www.youtube.com/watch?v=YOUR_VIDEO_ID',
                size: 16,
                color: '0066CC'
            })
        ],
        spacing: { before: 50, after: 200 }
    }));
    
    // Add Quick Start section
    children.push(new Paragraph({
        children: [
            new TextRun({
                text: 'H∆∞·ªõng D·∫´n Truy C·∫≠p Nhanh',
                size: 24,
                bold: true
            })
        ],
        spacing: { before: 300, after: 150 }
    }));
    
    children.push(new Paragraph({
        children: [
            new TextRun({
                text: 'ƒê·ªÉ s·ª≠ d·ª•ng h·ªá th·ªëng, b·∫°n ch·ªâ c·∫ßn:',
                size: 16,
                bold: true
            })
        ],
        spacing: { before: 100, after: 50 }
    }));
    
    children.push(new Paragraph({
        children: [
            new TextRun({
                text: '1. M·ªü tr√¨nh duy·ªát web (Chrome, Firefox, Edge, Safari)',
                size: 16
            })
        ],
        spacing: { before: 50, after: 30 }
    }));
    
    children.push(new Paragraph({
        children: [
            new TextRun({
                text: '2. Truy c·∫≠p ƒë·ªãa ch·ªâ: http://localhost:3000',
                size: 16,
                color: '0066CC'
            })
        ],
        spacing: { before: 30, after: 30 }
    }));
    
    children.push(new Paragraph({
        children: [
            new TextRun({
                text: '3. ƒêƒÉng k√Ω t√†i kho·∫£n ho·∫∑c ƒëƒÉng nh·∫≠p n·∫øu ƒë√£ c√≥',
                size: 16
            })
        ],
        spacing: { before: 30, after: 30 }
    }));
    
    children.push(new Paragraph({
        children: [
            new TextRun({
                text: '4. B·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng c·ªßa h·ªá th·ªëng',
                size: 16
            })
        ],
        spacing: { before: 30, after: 200 }
    }));
    
    // Add system requirements
    children.push(new Paragraph({
        children: [
            new TextRun({
                text: 'Y√™u C·∫ßu H·ªá Th·ªëng',
                size: 24,
                bold: true
            })
        ],
        spacing: { before: 300, after: 150 }
    }));
    
    children.push(new Paragraph({
        children: [
            new TextRun({
                text: '‚Ä¢ Tr√¨nh duy·ªát web hi·ªán ƒë·∫°i (Chrome 90+, Firefox 88+, Edge 90+, Safari 14+)',
                size: 16
            })
        ],
        spacing: { before: 50, after: 30 }
    }));
    
    children.push(new Paragraph({
        children: [
            new TextRun({
                text: '‚Ä¢ K·∫øt n·ªëi internet ·ªïn ƒë·ªãnh',
                size: 16
            })
        ],
        spacing: { before: 30, after: 30 }
    }));
    
    children.push(new Paragraph({
        children: [
            new TextRun({
                text: '‚Ä¢ RAM t·ªëi thi·ªÉu: 4GB',
                size: 16
            })
        ],
        spacing: { before: 30, after: 30 }
    }));
    
    children.push(new Paragraph({
        children: [
            new TextRun({
                text: '‚Ä¢ H·ªá ƒëi·ªÅu h√†nh: Windows 10+, macOS 10.15+, Linux',
                size: 16
            })
        ],
        spacing: { before: 30, after: 200 }
    }));
    
    // Parse main content (simplified and web-focused)
    const lines = markdown.split('\n');
    
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i].trim();
        
        if (!line) {
            children.push(new Paragraph({}));
            continue;
        }
        
        // Skip certain sections that are not relevant for web users
        if (line.startsWith('# üöÄ FactCheck Anti-Fraud Platform') || 
            line.startsWith('## üìã M·ª•c L·ª•c') ||
            line.includes('[Gi·ªõi Thi·ªáu]') ||
            line.includes('[Video H∆∞·ªõng D·∫´n]') ||
            line.startsWith('---') ||
            line.includes('Docker') ||
            line.includes('Node.js') ||
            line.includes('npm install')) {
            continue;
        }
        
        // Headers
        if (line.startsWith('# ')) {
            children.push(new Paragraph({
                children: [
                    new TextRun({
                        text: line.substring(2),
                        size: 24,
                        bold: true
                    })
                ],
                spacing: { before: 300, after: 150 }
            }));
        } else if (line.startsWith('## ')) {
            children.push(new Paragraph({
                children: [
                    new TextRun({
                        text: line.substring(3),
                        size: 20,
                        bold: true
                    })
                ],
                spacing: { before: 200, after: 100 }
            }));
        } else if (line.startsWith('### ')) {
            children.push(new Paragraph({
                children: [
                    new TextRun({
                        text: line.substring(4),
                        size: 18,
                        bold: true
                    })
                ],
                spacing: { before: 150, after: 75 }
            }));
        }
        // Lists
        else if (line.startsWith('- ') || line.startsWith('* ')) {
            children.push(new Paragraph({
                children: [
                    new TextRun({
                        text: line.substring(2),
                        size: 16
                    })
                ],
                spacing: { before: 50, after: 50 }
            }));
        } else if (line.match(/^\d+\.\s/)) {
            children.push(new Paragraph({
                children: [
                    new TextRun({
                        text: line.replace(/^\d+\.\s/, ''),
                        size: 16
                    })
                ],
                spacing: { before: 50, after: 50 }
            }));
        }
        // Regular text
        else if (line) {
            children.push(new Paragraph({
                children: [
                    new TextRun({
                        text: line,
                        size: 16
                    })
                ],
                spacing: { before: 100, after: 100 }
            }));
        }
    }
    
    return children;
}

// Run the creation
createWebAppDocx(); 