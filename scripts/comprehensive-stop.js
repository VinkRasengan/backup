# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
# FactCheck Platform - Start Scripts Guide

## 🚀 Quick Start

### Default Mode (All in One Terminal)
```bash
npm start
# or
npm start together
```

### Separate Terminal Mode (Recommended for Development)
```bash
npm start separate
```

## 📋 Available Commands

| Command | Description |
|---------|-------------|
| `npm start` | Start all services in one terminal (default) |
| `npm start together` | Start all services in one terminal (explicit) |
| `npm start separate` | Start each service in separate terminal windows |
| `npm run start:separate:ps1` | Use PowerShell script (Windows only) |
| `npm run start:separate:cmd` | Use CMD batch file (Windows only) |
| `npm run stop:separate` | Stop all services started in separate mode |

## 🎯 Service Overview

When you run `npm start separate`, the following services will be started:

| Service | Port | URL | Purpose |
|---------|------|-----|---------|
| **Frontend Client** | 3000 | http://localhost:3000 | React web application |
| **API Gateway** | 8080 | http://localhost:8080 | Main API entry point |
| **Auth Service** | 3001 | http://localhost:3001 | Authentication & user management |
| **Link Service** | 3002 | http://localhost:3002 | Link analysis & verification |
| **Community Service** | 3003 | http://localhost:3003 | Community features & voting |
| **Chat Service** | 3004 | http://localhost:3004 | Real-time chat & messaging |
| **News Service** | 3005 | http://localhost:3005 | News aggregation & analysis |
| **Admin Service** | 3006 | http://localhost:3006 | Admin panel & management |

## 🔧 Development Tips

### Separate Mode Benefits
- **Better Debugging**: Each service has its own terminal with dedicated logs
- **Easier Monitoring**: Watch specific service logs without clutter
- **Selective Restart**: Restart only the service you're working on
- **Memory Efficiency**: See resource usage per service

### Service Start Order
Services are started in this order to ensure proper dependencies:
1. API Gateway (8080) - First, as it routes to other services
2. Auth Service (3001) - Core authentication
3. Link Service (3002) - Link analysis
4. Community Service (3003) - Community features
5. Chat Service (3004) - Real-time features
6. News Service (3005) - News aggregation
7. Admin Service (3006) - Admin features
8. Frontend Client (3000) - Last, as it depends on all services

### Health Check
Check if all services are running:
```bash
curl http://localhost:8080/health
```

## 🛑 Stopping Services

### Stop All Services
```bash
npm run stop:separate
```

### Stop Individual Service
Close the specific terminal window or use `Ctrl+C` in that terminal.

### Force Stop (if needed)
```bash
# Windows
taskkill /F /IM node.exe /T

# Linux/Mac
pkill -f "node.*npm start"
```

## 🌐 Important URLs

After starting with `npm start separate`:

- **🎯 Main Application**: http://localhost:3000
- **🚪 API Gateway**: http://localhost:8080
- **📊 Health Check**: http://localhost:8080/health
- **📋 Service Info**: http://localhost:8080/info

## 🔍 Troubleshooting

### Port Already in Use
If you get "port already in use" errors:
```bash
npm run stop:separate
# Wait a few seconds, then try again
npm start separate
```

### Service Won't Start
1. Check if Node.js and npm are installed
2. Run `npm install` in the root directory
3. Check the specific service terminal for error messages
4. Ensure all environment variables are set in `.env`

### Performance Issues
- Use `npm start separate` for development
- Use `npm start together` for production-like testing
- Monitor resource usage in each terminal

## 🧪 Testing

### Test All Services
```bash
npm test
```

### Test Individual Service
```bash
cd services/auth-service && npm test
```

## 📚 Additional Resources

- [Main README](../README.md) - Project overview
- [Deployment Guide](../docs/deployment-architecture.puml) - Production deployment
- [API Documentation](../docs/api-gateway-flow.puml) - API reference
#!/usr/bin/env node
/**
 * Comprehensive Stop Script for FactCheck Platform
 * Stops ALL processes related to npm start (both together and separate modes)
 */

const { spawn, exec } = require('child_process');
const os = require('os');
const path = require('path');

class ComprehensiveStop {
  constructor() {
    this.isWindows = os.platform() === 'win32';
    this.ports = [3000, 3001, 3002, 3003, 3004, 3005, 3006, 8080, 9090, 3010, 9093, 9100, 8081, 4000, 5001];
    this.processNames = [
      'node.exe',
      'npm.cmd',
      'npm',
      'concurrently',
      'cmd.exe'
    ];
    this.serviceKeywords = [
      'factcheck',
      'auth-service',
      'link-service',
      'community-service',
      'chat-service',
      'news-service',
      'admin-service',
      'api-gateway',
      'start-services-separate',
      'start-handler'
    ];
  }

  async stop() {
    console.log('🛑 Comprehensive Stop: Killing ALL npm start processes...');
    console.log('=' .repeat(60));

    try {
      // Step 1: Stop processes by port
      console.log('1. 🔌 Stopping processes by port...');
      await this.stopByPorts();

      // Step 2: Stop all npm start related processes
      console.log('2. 📦 Stopping npm start processes...');
      await this.stopNpmStartProcesses();

      // Step 3: Stop all Node.js processes with service keywords
      console.log('3. 🔧 Stopping service-related Node.js processes...');
      await this.stopServiceProcesses();

      // Step 4: Stop concurrently processes
      console.log('4. 🔄 Stopping concurrently processes...');
      await this.stopConcurrentlyProcesses();

      // Step 5: Kill all remaining node processes (nuclear option)
      console.log('5. ☢️  Nuclear option: Killing all remaining Node.js processes...');
      await this.nuclearStop();

      // Step 6: Clean up terminal windows
      console.log('6. 🪟 Cleaning up terminal windows...');
      await this.cleanupTerminalWindows();

      console.log('✅ All processes stopped successfully!');
      console.log('💡 You can now run "npm start" or "npm start separate" to restart.');
      
    } catch (error) {
      console.error('❌ Stop failed:', error.message);
      console.log('💡 Some processes might still be running');
      console.log('   Try running the command again or restart your computer.');
    }
  }

  async stopByPorts() {
    const promises = this.ports.map(port => this.killProcessOnPort(port));
    await Promise.all(promises);
  }

  async killProcessOnPort(port) {
    return new Promise((resolve) => {
      if (this.isWindows) {
        // Windows: Find PID and kill
        exec(`netstat -ano | findstr :${port}`, (error, stdout) => {
          if (stdout) {
            const lines = stdout.trim().split('\n');
            const pids = new Set();
            
            lines.forEach(line => {
              const parts = line.trim().split(/\s+/);
              if (parts.length >= 5 && parts[1].includes(`:${port}`)) {
                pids.add(parts[4]);
              }
            });

            if (pids.size > 0) {
              pids.forEach(pid => {
                exec(`taskkill /F /PID ${pid} /T`, (killError) => {
                  if (!killError) {
                    console.log(`   ✅ Killed process on port ${port} (PID: ${pid})`);
                  }
                });
              });
            }
          }
          resolve();
        });
      } else {
        // Linux/Mac: Use lsof and kill
        exec(`lsof -ti:${port}`, (error, stdout) => {
          if (stdout) {
            const pids = stdout.trim().split('\n');
            pids.forEach(pid => {
              if (pid) {
                exec(`kill -9 ${pid}`, (killError) => {
                  if (!killError) {
                    console.log(`   ✅ Killed process on port ${port} (PID: ${pid})`);
                  }
                });
              }
            });
          }
          resolve();
        });
      }
    });
  }

  async stopNpmStartProcesses() {
    const commands = [];
    
    if (this.isWindows) {
      commands.push(
        'taskkill /F /FI "IMAGENAME eq npm.cmd" /T',
        'taskkill /F /FI "IMAGENAME eq npm.exe" /T',
        'taskkill /F /FI "IMAGENAME eq node.exe" /FI "COMMANDLINE eq *npm*start*" /T',
        'taskkill /F /FI "IMAGENAME eq cmd.exe" /FI "WINDOWTITLE eq *npm start*" /T',
        'taskkill /F /FI "IMAGENAME eq cmd.exe" /FI "WINDOWTITLE eq *factcheck*" /T',
        'taskkill /F /FI "IMAGENAME eq cmd.exe" /FI "WINDOWTITLE eq *Service*" /T'
      );
    } else {
      commands.push(
        'pkill -f "npm.*start"',
        'pkill -f "npm run start"',
        'pkill -f "node.*start"',
        'pkill -f "factcheck-platform"'
      );
    }

    const promises = commands.map(cmd => this.runCommand(cmd));
    await Promise.all(promises);
    console.log('   ✅ NPM start processes stopped');
  }

  async stopServiceProcesses() {
    const commands = [];
    
    if (this.isWindows) {
      // Kill Node.js processes with service keywords
      this.serviceKeywords.forEach(keyword => {
        commands.push(`taskkill /F /FI "IMAGENAME eq node.exe" /FI "COMMANDLINE eq *${keyword}*" /T`);
      });
    } else {
      // Kill Node.js processes with service keywords
      this.serviceKeywords.forEach(keyword => {
        commands.push(`pkill -f "node.*${keyword}"`);
      });
    }

    const promises = commands.map(cmd => this.runCommand(cmd));
    await Promise.all(promises);
    console.log('   ✅ Service processes stopped');
  }

  async stopConcurrentlyProcesses() {
    const commands = [];
    
    if (this.isWindows) {
      commands.push(
        'taskkill /F /FI "IMAGENAME eq node.exe" /FI "COMMANDLINE eq *concurrently*" /T',
        'taskkill /F /FI "IMAGENAME eq node.exe" /FI "COMMANDLINE eq *start-handler*" /T'
      );
    } else {
      commands.push(
        'pkill -f concurrently',
        'pkill -f start-handler'
      );
    }

    const promises = commands.map(cmd => this.runCommand(cmd));
    await Promise.all(promises);
    console.log('   ✅ Concurrently processes stopped');
  }

  async nuclearStop() {
    console.log('   ⚠️  Warning: This will kill ALL Node.js processes');
    
    if (this.isWindows) {
      await this.runCommand('taskkill /F /IM node.exe /T');
    } else {
      await this.runCommand('pkill -9 -f node');
    }
    
    console.log('   ✅ All Node.js processes terminated');
  }

  async cleanupTerminalWindows() {
    if (this.isWindows) {
      // Close CMD windows with service titles
      const commands = [
        'taskkill /F /FI "IMAGENAME eq cmd.exe" /FI "WINDOWTITLE eq *Service - Port*" /T',
        'taskkill /F /FI "IMAGENAME eq cmd.exe" /FI "WINDOWTITLE eq *Gateway - Port*" /T',
        'taskkill /F /FI "IMAGENAME eq cmd.exe" /FI "WINDOWTITLE eq *Client - Port*" /T',
        'taskkill /F /FI "IMAGENAME eq cmd.exe" /FI "WINDOWTITLE eq *Frontend Client*" /T',
        'taskkill /F /FI "IMAGENAME eq cmd.exe" /FI "WINDOWTITLE eq *API Gateway*" /T',
        'taskkill /F /FI "IMAGENAME eq cmd.exe" /FI "WINDOWTITLE eq *Admin Service*" /T',
        'taskkill /F /FI "IMAGENAME eq cmd.exe" /FI "WINDOWTITLE eq *News Service*" /T',
        'taskkill /F /FI "IMAGENAME eq cmd.exe" /FI "WINDOWTITLE eq *Chat Service*" /T',
        'taskkill /F /FI "IMAGENAME eq cmd.exe" /FI "WINDOWTITLE eq *Community Service*" /T',
        'taskkill /F /FI "IMAGENAME eq cmd.exe" /FI "WINDOWTITLE eq *Link Service*" /T',
        'taskkill /F /FI "IMAGENAME eq cmd.exe" /FI "WINDOWTITLE eq *Auth Service*" /T'
      ];
      const promises = commands.map(cmd => this.runCommand(cmd));
      await Promise.all(promises);
      console.log('   ✅ Terminal windows cleaned up');
    } else {
      console.log('   ℹ️  Manual terminal cleanup may be needed on Linux/Mac');
    }
  }

  async runCommand(command) {
    return new Promise((resolve) => {
      exec(command, (error, stdout, stderr) => {
        // Always resolve, ignore errors for processes that don't exist
        resolve();
      });
    });
  }
}

// Run if called directly
if (require.main === module) {
  const stopper = new ComprehensiveStop();
  stopper.stop().catch(console.error);
}

module.exports = ComprehensiveStop;
