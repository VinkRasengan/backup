const OpenAI = require('openai');
const logger = require('firebase-functions/logger');
const functions = require('firebase-functions');

class OpenAIService {
  constructor() {
    this.openai = null;
    this.model = 'gpt-3.5-turbo';
    this.maxTokens = 500;
    this.temperature = 0.7;
    
    this.systemPrompt = `B·∫°n l√† m·ªôt chuy√™n gia b·∫£o m·∫≠t m·∫°ng v√† ph√¢n t√≠ch m·ªëi ƒëe d·ªça tr·ª±c tuy·∫øn v·ªõi nhi·ªÅu nƒÉm kinh nghi·ªám. 

Nhi·ªám v·ª• c·ªßa b·∫°n:
- Cung c·∫•p l·ªùi khuy√™n chuy√™n nghi·ªáp v·ªÅ b·∫£o m·∫≠t m·∫°ng
- Gi√∫p ng∆∞·ªùi d√πng nh·∫≠n bi·∫øt v√† ph√≤ng tr√°nh c√°c m·ªëi ƒëe d·ªça tr·ª±c tuy·∫øn
- H∆∞·ªõng d·∫´n c√°c bi·ªán ph√°p b·∫£o v·ªá th√¥ng tin c√° nh√¢n
- Ph√¢n t√≠ch v√† ƒë√°nh gi√° r·ªßi ro b·∫£o m·∫≠t

Phong c√°ch tr·∫£ l·ªùi:
- S·ª≠ d·ª•ng ti·∫øng Vi·ªát
- Gi·∫£i th√≠ch r√µ r√†ng, d·ªÖ hi·ªÉu
- Cung c·∫•p v√≠ d·ª• c·ª• th·ªÉ
- ƒê∆∞a ra l·ªùi khuy√™n th·ª±c t·∫ø
- S·ª≠ d·ª•ng emoji ph√π h·ª£p ƒë·ªÉ l√†m n·ªïi b·∫≠t
- C·∫•u tr√∫c c√¢u tr·∫£ l·ªùi c√≥ ƒë·∫ßu m·ª•c r√µ r√†ng

Ch·ªâ tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn b·∫£o m·∫≠t m·∫°ng, an to√†n th√¥ng tin, ph√≤ng ch·ªëng l·ª´a ƒë·∫£o tr·ª±c tuy·∫øn.`;
  }

  isConfigured() {
    // Try to get API key from environment variables or Firebase config
    const apiKey = process.env.OPENAI_API_KEY ||
                   (typeof functions !== 'undefined' && functions.config().openai?.api_key);

    if (!apiKey) {
      logger.warn('OpenAI API key not configured');
      return false;
    }

    if (!this.openai) {
      this.openai = new OpenAI({
        apiKey: apiKey
      });
    }
    return true;
  }

  async sendMessage(userMessage, conversationHistory = []) {
    try {
      if (!this.isConfigured()) {
        return this.getFallbackResponse(userMessage);
      }

      // Validate message
      const validation = this.validateMessage(userMessage);
      if (!validation.valid) {
        return {
          success: false,
          error: validation.error
        };
      }

      // Prepare messages for OpenAI
      const messages = [
        { role: 'system', content: this.systemPrompt }
      ];

      // Add conversation history (limit to last 10 messages)
      const recentHistory = conversationHistory.slice(-10);
      messages.push(...recentHistory);

      // Add current user message
      messages.push({ role: 'user', content: validation.message });

      logger.info('Sending request to OpenAI', { 
        messageCount: messages.length,
        model: this.model 
      });

      const completion = await this.openai.chat.completions.create({
        model: this.model,
        messages: messages,
        max_tokens: this.maxTokens,
        temperature: this.temperature,
        presence_penalty: 0.1,
        frequency_penalty: 0.1
      });

      const response = completion.choices[0]?.message?.content;
      
      if (!response) {
        throw new Error('No response from OpenAI');
      }

      logger.info('OpenAI response received', {
        usage: completion.usage,
        model: completion.model
      });

      return {
        success: true,
        message: response,
        usage: completion.usage,
        model: completion.model
      };

    } catch (error) {
      logger.error('OpenAI API error:', error);

      // Handle specific OpenAI errors
      if (error.status === 429) {
        if (error.code === 'insufficient_quota') {
          return {
            success: false,
            error: 'T√†i kho·∫£n OpenAI ƒë√£ h·∫øt quota. Vui l√≤ng ki·ªÉm tra billing v√† th√™m credit v√†o t√†i kho·∫£n.'
          };
        }
        return {
          success: false,
          error: 'ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n API. Vui l√≤ng th·ª≠ l·∫°i sau.'
        };
      }

      if (error.status === 401) {
        return {
          success: false,
          error: 'L·ªói x√°c th·ª±c OpenAI API. Vui l√≤ng ki·ªÉm tra API key.'
        };
      }

      if (error.status === 400) {
        return {
          success: false,
          error: 'Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i v·ªõi tin nh·∫Øn kh√°c.'
        };
      }

      // Only fallback in development or if specifically configured
      if (process.env.NODE_ENV === 'development' || process.env.ALLOW_FALLBACK === 'true') {
        logger.warn('Development mode: falling back to mock response:', error.message);
        return this.getFallbackResponse(userMessage);
      }

      // In production, return proper error
      return {
        success: false,
        error: 'D·ªãch v·ª• AI t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng th·ª≠ l·∫°i sau.'
      };
    }
  }

  getFallbackResponse(userMessage) {
    const lowerMessage = userMessage.toLowerCase();

    if (lowerMessage.includes('phishing') || lowerMessage.includes('l·ª´a ƒë·∫£o')) {
      return {
        success: true,
        message: `üé£ **C√°ch nh·∫≠n bi·∫øt email phishing:**

1. **Ki·ªÉm tra ƒë·ªãa ch·ªâ g·ª≠i**: Email phishing th∆∞·ªùng s·ª≠ d·ª•ng ƒë·ªãa ch·ªâ gi·∫£ m·∫°o ho·∫∑c t√™n mi·ªÅn t∆∞∆°ng t·ª± c√°c t·ªï ch·ª©c uy t√≠n.

2. **N·ªôi dung kh·∫©n c·∫•p**: Th∆∞·ªùng t·∫°o c·∫£m gi√°c c·∫•p b√°ch nh∆∞ "t√†i kho·∫£n s·∫Ω b·ªã kh√≥a", "c·∫ßn x√°c minh ngay".

3. **Li√™n k·∫øt ƒë√°ng ng·ªù**: Hover chu·ªôt l√™n link ƒë·ªÉ xem URL th·ª±c. Phishing th∆∞·ªùng d√πng URL r√∫t g·ªçn ho·∫∑c t√™n mi·ªÅn gi·∫£.

4. **Y√™u c·∫ßu th√¥ng tin c√° nh√¢n**: Ng√¢n h√†ng, t·ªï ch·ª©c uy t√≠n kh√¥ng bao gi·ªù y√™u c·∫ßu m·∫≠t kh·∫©u qua email.

5. **L·ªói ch√≠nh t·∫£**: Email phishing th∆∞·ªùng c√≥ nhi·ªÅu l·ªói ng·ªØ ph√°p, ch√≠nh t·∫£.

**L·ªùi khuy√™n**: Lu√¥n truy c·∫≠p tr·ª±c ti·∫øp website ch√≠nh th·ª©c thay v√¨ click link trong email ƒë√°ng ng·ªù.`,
        usage: { prompt_tokens: 50, completion_tokens: 100, total_tokens: 150 },
        model: 'fallback-response'
      };
    }

    if (lowerMessage.includes('m·∫≠t kh·∫©u') || lowerMessage.includes('password')) {
      return {
        success: true,
        message: `üîê **C√°ch t·∫°o m·∫≠t kh·∫©u m·∫°nh:**

1. **ƒê·ªô d√†i**: T·ªëi thi·ªÉu 12 k√Ω t·ª±, c√†ng d√†i c√†ng t·ªët.

2. **K·∫øt h·ª£p ƒëa d·∫°ng**: 
   - Ch·ªØ hoa (A-Z)
   - Ch·ªØ th∆∞·ªùng (a-z) 
   - S·ªë (0-9)
   - K√Ω t·ª± ƒë·∫∑c bi·ªát (!@#$%^&*)

3. **Tr√°nh th√¥ng tin c√° nh√¢n**: Kh√¥ng d√πng t√™n, ng√†y sinh, s·ªë ƒëi·ªán tho·∫°i.

4. **Unique cho m·ªói t√†i kho·∫£n**: M·ªói website/app m·ªôt m·∫≠t kh·∫©u ri√™ng.

5. **S·ª≠ d·ª•ng Password Manager**: LastPass, 1Password, Bitwarden ƒë·ªÉ qu·∫£n l√Ω.

**V√≠ d·ª• m·∫≠t kh·∫©u m·∫°nh**: MyC@t15Fluffy&Cute2024!

**L·ªùi khuy√™n**: B·∫≠t 2FA (x√°c th·ª±c 2 b∆∞·ªõc) cho t·∫•t c·∫£ t√†i kho·∫£n quan tr·ªçng.`,
        usage: { prompt_tokens: 50, completion_tokens: 120, total_tokens: 170 },
        model: 'fallback-response'
      };
    }

    // Default response
    return {
      success: true,
      message: `üõ°Ô∏è **Ch√†o b·∫°n!** 

T√¥i l√† tr·ª£ l√Ω AI chuy√™n v·ªÅ b·∫£o m·∫≠t m·∫°ng. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ:

‚Ä¢ **Phishing & L·ª´a ƒë·∫£o**: C√°ch nh·∫≠n bi·∫øt v√† ph√≤ng tr√°nh
‚Ä¢ **M·∫≠t kh·∫©u**: T·∫°o v√† qu·∫£n l√Ω m·∫≠t kh·∫©u an to√†n  
‚Ä¢ **Malware**: B·∫£o v·ªá kh·ªèi virus v√† ph·∫ßn m·ªÅm ƒë·ªôc h·∫°i
‚Ä¢ **B·∫£o m·∫≠t WiFi**: Thi·∫øt l·∫≠p m·∫°ng an to√†n
‚Ä¢ **M·∫°ng x√£ h·ªôi**: B·∫£o v·ªá th√¥ng tin c√° nh√¢n
‚Ä¢ **Ph√¢n t√≠ch URL**: ƒê√°nh gi√° t√≠nh an to√†n c·ªßa website

B·∫°n c√≥ c√¢u h·ªèi c·ª• th·ªÉ n√†o v·ªÅ b·∫£o m·∫≠t kh√¥ng? T√¥i s·∫Ω cung c·∫•p l·ªùi khuy√™n chi ti·∫øt v√† th·ª±c t·∫ø.

${!this.isConfigured() ? '*L∆∞u √Ω: OpenAI API ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n ƒë·ªÉ k√≠ch ho·∫°t t√≠nh nƒÉng AI.*' : ''}`,
      usage: { prompt_tokens: 30, completion_tokens: 80, total_tokens: 110 },
      model: 'fallback-response'
    };
  }

  validateMessage(message) {
    if (!message || typeof message !== 'string') {
      return { valid: false, error: 'Tin nh·∫Øn kh√¥ng h·ª£p l·ªá' };
    }

    const trimmedMessage = message.trim();
    
    if (trimmedMessage.length === 0) {
      return { valid: false, error: 'Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng' };
    }

    if (trimmedMessage.length > 1000) {
      return { valid: false, error: 'Tin nh·∫Øn qu√° d√†i (t·ªëi ƒëa 1000 k√Ω t·ª±)' };
    }

    return { valid: true, message: trimmedMessage };
  }

  getConversationStarters() {
    return [
      "L√†m th·∫ø n√†o ƒë·ªÉ nh·∫≠n bi·∫øt email l·ª´a ƒë·∫£o?",
      "C√°ch t·∫°o m·∫≠t kh·∫©u m·∫°nh v√† an to√†n?",
      "Ph·∫ßn m·ªÅm di·ªát virus n√†o t·ªët nh·∫•t?",
      "C√°ch b·∫£o v·ªá th√¥ng tin c√° nh√¢n tr√™n m·∫°ng?",
      "D·∫•u hi·ªáu nh·∫≠n bi·∫øt website gi·∫£ m·∫°o?",
      "C√°ch b·∫£o m·∫≠t t√†i kho·∫£n m·∫°ng x√£ h·ªôi?",
      "Ph·∫£i l√†m g√¨ khi b·ªã hack t√†i kho·∫£n?",
      "C√°ch ki·ªÉm tra link c√≥ an to√†n kh√¥ng?"
    ];
  }
}

module.exports = new OpenAIService();
